<?php

function rpforum_init() {
  // This code is modified by the moderator.  Do NOT change it unless
  // you know what you are doing!
  $GLOBALS["rpforum_version_code"] = 17; // 17 = 1.6.3.1b
  
  // Load our include files.
  module_load_include("inc", "rpforum", "rpforum.admin");
  module_load_include("inc", "rpforum", "rpforum.user");
  module_load_include("inc", "rpforum", "rpforum.search");
  
}

function rpforum_rebuild_topic_reply_counts($bool_show_message = TRUE) {
  // First, let's get every post that has -1 as its parent_node (which
  // means it is a topic).
  $t = 0; 
  $query = "
      SELECT node.nid AS nid,
         node.created AS node_created
       FROM {node} node 
       LEFT JOIN {content_type_rp_forum_post} node_data_field_parent_node ON node.vid = node_data_field_parent_node.vid
       WHERE (node.type in ('rp_forum_post')) AND ((node_data_field_parent_node.field_parent_node_value) = ('-1')) AND node.status = 1
            ";
  $res = db_query($query);
  while ($cur = db_fetch_array($res)) { 
    $t++;
    $nid = $cur["nid"];
    // Get the counts for this nid.
    $count = rpforum_get_replies_to_post_count($nid);
    // Now, update or insert into the table.
    db_query("UPDATE {rpforum_topic_replies}
              SET count = %d
              WHERE nid = %d ", $count, $nid);
    if (db_affected_rows() == 0) {
      db_query("INSERT INTO {rpforum_topic_replies}
                (nid, count) VALUES (%d, %d) ", $nid, $count);
    }
    
  }
  
  if ($bool_show_message) {
    drupal_set_message(t("Topic reply counts rebuilt successfully for @t topics.", array("@t" => $t)));
  }
  
}




function rpforum_block($op = 'list', $delta = "albums", $edit = array())
{

  if ($op == "list")
  {
    $blocks["search"]["info"] = t("RP Forum - Search");
    $blocks["recent"]["info"] = t("RP Forum - Recent Posts");
    return $blocks;
  }

  if ($op == "configure") {
    if ($delta == "recent") {
      
      $form["rpforum_block_num_posts"] = array(
        "#title" => t("Number of posts to display"),
        "#type" => "textfield",
        "#size" => 5,
        "#default_value" => variable_get("rpforum_block_num_posts", 5),
      );

      $form["rpforum_block_title_limit"] = array(
        "#title" => t("Max title characters to display"),
        "#type" => "textfield",
        "#size" => 20,
        "#default_value" => variable_get("rpforum_block_title_limit", 30),
        "#description" => t("Enter the number of characters to limit the post title to for
                             this block.  The title will be trimmed and '...' will be
                             appended.  If set to 0 or left blank, there will be no limit.
                             <br>
                             If unsure, leave blank."),
      );


      $form["rpforum_block_show_ago"] = array(
        "#title" => t("Show time as 'time ago'?"),
        "#type" => "checkbox",
        "#default_value" => variable_get("rpforum_block_show_ago", 1),
        "#description" => t("If checked, time will not be shown as a timestamp, but
                           rather as X minutes ago or X weeks ago. If unchecked, the default
                           date format for your site will be used (configure that under Administer->Date and Time).
                           <br>
                           If you are unsure, leave this box checked."),
      );
      
      return $form;
    }
  }
  
  if ($op == "save") {  // saving the configure forms!
    if ($delta == "recent") {
      variable_set("rpforum_block_num_posts", $edit["rpforum_block_num_posts"]);
      variable_set("rpforum_block_show_ago", $edit["rpforum_block_show_ago"]);
      variable_set("rpforum_block_title_limit", $edit["rpforum_block_title_limit"]);
    }
  }

  if ($op == "view")
  {
    if ($delta == "search" && user_access("access rpforums"))
    {
      // The search block.
      $block["subject"] = "";
      $block["content"] = rpforum_display_search_block();
    }
    
    if ($delta == "recent") {
      $block["subject"] = "Recent RP Forum posts";
      $block["content"] = rpforum_display_recent_block();
    }

    return $block;
  }

}

/**
 * This is the display function for our "recent posts" block.  Basically,
 * we want to display the number of recent posts to the forum in an attractive manner.
 **/
function rpforum_display_recent_block() {
  $rtn = "";
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");
  
  // This is going to function in a similar way as rpforum_display_feed().
  $num_posts = db_escape_string(variable_get("rpforum_block_num_posts", 5));
  $title_limit = variable_get("rpforum_block_title_limit", 30); 
  $show_ago = variable_get("rpforum_block_show_ago", 1);   
  $query = "
          SELECT node.nid AS nid,
           node.created AS node_created
          FROM {node} node 
          WHERE (node.promote <> 0) AND (node.type in ('rp_forum_post'))
                AND node.status = 1
          ORDER BY node_created DESC
          LIMIT $num_posts
        ";
  $res = db_query($query);
  $pol = "odd";
  while ($cur = db_fetch_array($res)) {
    $node = node_load($cur["nid"]);
    $title = $node->title;
    if ($title_limit > 0) {
      $new_title = trim(substr($title, 0, $title_limit));
      if ($new_title != $title) {
        // meaning, it was indeed shortened
        $title = $new_title . "...";
      }
    }
    if ($show_ago == 1) {
      $date_created = "<span class='rpforum-recent-block-comma'>,</span> " . rpforum_get_time_ago($node->created);
    }
    else {
      $date_created = t(" at ") . rpforum_format_date($node->created);
 
    }
    
    $tid = key($node->taxonomy);
    $topic_nid = ($node->field_parent_node[0]["value"] == "-1") ? $node->nid : $node->field_parent_node[0]["value"];
    $topic_url = "$menu_base/$tid/$topic_nid";

    $name = theme("username", user_load($node->uid));
    // If this was an anon posting, get what name they entered.
    if ($node->uid == 0) {
      
      if ($node->field_anon_name[0]["value"] != "") {
        $name = check_plain($node->field_anon_name[0]["value"]);
      }
    }
    
    $by = t("by");
    
    $rtn .= "<div class='rpforum-recent-block-row rpforum-recent-block-row-$pol'>
                <div class='rpforum-recent-block-row-title'>
                  " . l($title, "$topic_url", array("query" => "goto=$node->nid")) . "
                </div>
                <div class='rpforum-recent-block-by-line'>
                  <span class='rpforum-recent-block-user'>$by $name</span><span class='rpforum-recent-block-time'>$date_created</span>
                </div>
            </div>";
    
    $pol = ($pol == "odd") ? "even" : "odd";
    
  }

  return $rtn;
}


function rpforum_get_time_ago($time)
{
$periods = array(t("second"), t("minute"), t("hour"), t("day"), t("week"), t("month"), t("year"), t("decade"));
$lengths = array("60","60","24","7","4.35","12","10");

$now = time();

$difference     = $now - $time;
$tense         = t("ago");

for($j = 0; $difference >= $lengths[$j] && $j < count($lengths)-1; $j++) {
  $difference /= $lengths[$j];
}

$difference = round($difference);

if($difference != 1) {
  $periods[$j].= "s";
}
  if ($difference < 1) $difference = 1;
  
  return $difference . " " . $periods[$j]  . " <span class='rpforum-recent-ago'>$tense</span>";
}



/**
 * This is called by the tools menu, usually.  The point is to fix posts whose
 * taxonomys are missing, or are pointing to the wrong thing.  This might
 * happen after trying to perform a conversion from another forum system.
 *
 */
function rpforum_repair_post_taxonomy($bool_show_message = TRUE) {
  
  // First, let's get every post that has -1 as its parent_node (which
  // means it is a topic).
  
  $t = $p = $no_topic_tid = 0; 
  $query = "
      SELECT node.nid AS nid,
         node.created AS node_created
       FROM {node} node 
       LEFT JOIN {content_type_rp_forum_post} node_data_field_parent_node ON node.vid = node_data_field_parent_node.vid
       WHERE (node.type in ('rp_forum_post')) AND ((node_data_field_parent_node.field_parent_node_value) = ('-1')) 
            ";
  $res = db_query($query);
  while ($cur = db_fetch_array($res)) { 
    $t++;
    $nid = $cur["nid"];
    
    // Now that we have the nid, let's figure out what it's tid is.
    $tid = db_result(db_query("SELECT tid FROM {term_node} WHERE nid = %d", $nid));
    if ($tid > 0 || $tid != "") {
      // Okay, we now have the tid.  Now, we need to make everything which had *this* node as a parent
      // have the same tid.
      $res2 = db_query("SELECT nid, vid FROM {content_type_rp_forum_post} WHERE field_parent_node_value = %d", $nid);
      while ($cur2 = db_fetch_array($res2)) {
        $post_nid = $cur2["nid"];
        $post_vid = $cur2["vid"]; // version id, NOT taxonomy vocab id!
        // Okay, now perform the update (or insert) to the term_node table.
        $res3 = db_query("UPDATE {term_node} SET tid = %d WHERE nid = %d AND vid = %d", $tid, $post_nid, $post_vid);
        if (db_affected_rows() == 0) {
          $res3 = db_query("INSERT INTO {term_node} (nid, vid, tid) VALUES (%d, %d, %d)", $post_nid, $post_vid, $tid);
        }
        $p++;
      }
       
    }
    else {
      $no_topic_tid++;
    }
    
  }
  
  if ($bool_show_message) {    
    drupal_set_message(t("Taxonomy rebuilt successfully for @t topics, @p posts.", array("@t" => $t, "@p" => $p)));
    if ($no_topic_tid > 0) {
      drupal_set_message(t("Alert! @t topics did not have any taxonomy associated with them!", array("@t" => $no_topic_tid)));
    }
  }  
  
  
}


function rpforum_format_date($ts) {
  $type = variable_get("rpforum_selected_date_format", "medium");
  
  return format_date($ts, $type);
}


/**
 * Implementation of hook_theme
 * Chiefly, we want to be able to control how our field_body2 textarea looks
 * (whether we use BBcode on it or not).  So, we need to register our function
 * which will handle that.
 *
 * @return unknown
 */
function rpforum_theme() {
  return array(
    "text_formatter_default" => array(
      "arguments" => array("element" => NULL),
      "function" => "rpforum_text_formatter_default",
    ),
    
  );
}



/**
 * This function, which was registered in hook_theme, will be used
 * to change the way our field_body2 textarea gets displayed to the user.
 *
 * @param unknown_type $element
 * @return unknown
 */
function rpforum_text_formatter_default($element) {
  
  
  
  if ($element["#type_name"] == "rp_forum_post" && $element["#field_name"] == "field_body2") {

    // Are we even using bbcode at all?
    if (variable_get("rpforum_use_bbcode", 1) != 0) {
      $display_body = rpforum_convert_bbcode_to_html($element["#item"]["safe"]);
    } 
    else {
      $display_body = $element["#item"]["safe"];
    }
    
    if (variable_get("rpforum_use_smileys", 1) != 0) {
      $display_body = rpforum_convert_smileys_to_html($display_body);
    }    
    
    // Filter out naughty words, if there are any.
    $display_body = rpforum_filter_bad_words($display_body);
    
    // Okay, we have made our conversions; let's put it back into $element.
    $element["#item"]["safe"] = $display_body;
    
     
  }
  
  
  return ($allowed =_text_allowed_values($element)) ? $allowed : $element['#item']['safe'];
}


/**
 * This is used to filter out bad words from the string, set
 * in admin/settings/rpforum.
 * 
 * Returns the cleaned string.
 *
 * @param string $str
 */
function rpforum_filter_bad_words($str) {
  
  $filters = variable_get("rpforum_filter_words", "");
  if ($filters == "") return $str;
  
  $lines = explode("\n", $filters);
  foreach ($lines as $line) {
    if ($line == "") continue;
    
    $temp = explode("|", $line);
    $str = str_ireplace($temp[0], $temp[1], $str);    
  }
  
  return $str;
}


function rpforum_cron() {
  
  // When the cron runs, we want to perform a few actions.
  
  // delete from user_search_results any old search results (anything over X minutes can be
  // deleted.
  db_query("DELETE FROM {rpforum_user_search_results} WHERE datetime < NOW() - INTERVAL 30 MINUTE ");
  
  
   
   //////////////////////////////////
   // Perform the installation status update, if allowed.
   if (variable_get("rp_inst_status_update", 1) == 1) {
     
     $module = "rpforum";
     $url = check_plain($GLOBALS["base_url"]);
     $eurl = urlencode($url);
     $version = "unknown";

     // Now, check to see if it has been X number of days since our last update.
     $last_updated = variable_get("rp_inst_status_$module", 0);
     if (time() > $last_updated + (48 * 60 * 60)) { // greater than 2 days
       
       // Let's try to figure out the version number of this module.
       $info = db_result(db_query("SELECT info FROM {system} WHERE name = '%s' ", $module));
       if ($temp = unserialize($info)) {
        $version = urlencode(check_plain($temp["version"])); 
       }
       
       // Okay, let's submit to richardpeacock.com.
       
       ///////////////////////////////////////////////////////
       // This is required so that richardpeacock.com can verify the submission.
       // DO NOT CHANGE THIS VALUE!!!
       $secret = "RP_INSTALL_STATUS_TOKEN_873341_2224343980";  // DO NOT CHANGE THIS VALUE!!
       ///////////////////////////////////////////////////////
       
       $update_token = md5($url . $module . $version . $secret);
       
       try {
        $result = drupal_http_request("http://www.richardpeacock.com/status/rp-update?module=$module&url=$eurl&version=$version&update_token=$update_token");
        $temp = explode("::", $result->data);
        $latest_version = trim($temp[0]);
        $latest_version_code = trim($temp[1]);
        variable_set("rp_inst_latest_version_$module", $latest_version);
        variable_set("rp_inst_latest_version_code_$module", $latest_version_code);
        
        // Okay, the install status has been sent.  Now, let's save the time that we send the
        // update so we only do it once every few days.
        variable_set("rp_inst_status_$module", time());
       } catch (Exception $e) {
        drupal_set_message("Exception while attempting to send update status. Disable to prevent
                            seeing this message again (go to $module's settings page to disable): $e");
       }
       // And we're all done here!
       
     }
     
   }
   
  
}


function rpforum_menu()
{
  $items = array();
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  $rpforum_title = variable_get("rpforum_title", "RP Forum");
  $rpforum_front_is_public = variable_get("rp_forum_front_public", 1);
  

  $items[$menu_base] = array(
    "title" => $rpforum_title,
    "page callback" => "rpforum_display_main",
    "type" => MENU_NORMAL_ITEM,
  );
  if ($rpforum_front_is_public == 1) {
    $items[$menu_base]["access callback"] = TRUE;
  }
  else {
    $items[$menu_base]["access arguments"] = array("access rpforums");
  }

  
  $items["$menu_base/%"] = array(
    "title" => $rpforum_title,
    "page callback" => "rpforum_display_topics",
    "page arguments" => array(1),
    "access callback" => "rpforum_access_forum",
    "access arguments" => array(1),
    "type" => MENU_NORMAL_ITEM,
  );
  
  $items["$menu_base/%/%"] = array(
    "title" => $rpforum_title,
    "page callback" => "rpforum_display_posts",
    "page arguments" => array(1, 2),
    "access callback" => "rpforum_access_forum",
    "access arguments" => array(1),
    "type" => MENU_NORMAL_ITEM,
  );

  $items["$menu_base/sticky/%/%"] = array(
    "title" => $rpforum_title,
    "page callback" => "rpforum_make_topic_sticky",
    "page arguments" => array(2,3),
    "access callback" => "rpforum_access_moderate_forum",
    "access arguments" => array(2, 2),
    "type" => MENU_NORMAL_ITEM,
  );

  $items["$menu_base/lock/%/%"] = array(
    "title" => $rpforum_title,
    "page callback" => "rpforum_make_topic_locked",
    "page arguments" => array(2,3),
    "access callback" => "rpforum_access_moderate_forum",
    "access arguments" => array(2, 2),
    "type" => MENU_CALLBACK,
  );
  
  $items["$menu_base/move/%"] = array(
    "title" => $rpforum_title,
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_move_topic_form", 2),
    "access callback" => "rpforum_access_moderate_forum",
    "access arguments" => array(2, 2),
    "type" => MENU_NORMAL_ITEM,
  );

  $items["$menu_base/move-post/%"] = array(
    "title" => $rpforum_title,
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_move_post_form", 2),
    "access callback" => "rpforum_access_moderate_forum",
    "access arguments" => array(2, 2),
    "type" => MENU_NORMAL_ITEM,
  );
  
  $items["$menu_base/split-topic/%"] = array(
    "title" => $rpforum_title,
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_split_topic_form", 2),
    "access callback" => "rpforum_access_moderate_forum",
    "access arguments" => array(2, 2),
    "type" => MENU_NORMAL_ITEM,
  );
  
  
  $items["$menu_base/report-abuse/%/%/%"] = array(
    "title" => $rpforum_title,
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_report_abuse_form", 2, 3, 4),
    "access arguments" => array("allow report rpforum abuse"),
    "type" => MENU_NORMAL_ITEM,
  );  
  
  $items["admin/settings/rpforum"] = array(
    "title" => "RP Forum settings",
    "description" => "Configure your RP Forums.",
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_admin_form"),
    "access arguments" => array("administer rpforum settings"),
    "type" => MENU_NORMAL_ITEM,
  );
  $items["admin/settings/rpforum/settings"] = array(
    "title" => "Settings",
    "type" => MENU_DEFAULT_LOCAL_TASK,
    "access arguments" => array("administer rpforum settings"),
    "weight" => -1,
  );  

  
  $items["admin/settings/rpforum/bans"] = array(
    "title" => "Bans",
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_admin_bans_form"),
    "access arguments" => array("administer rpforum bans"),
    "weight" => 10,
    "type" => MENU_LOCAL_TASK,
  );
  
  $items["admin/settings/rpforum/user-settings"] = array(
    "title" => "User Settings",
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_admin_user_settings_form"),
    "access arguments" => array("administer rpforum settings"),
    "weight" => 15,
    "type" => MENU_LOCAL_TASK,
  );
  
  $items["admin/settings/rpforum/access"] = array(
    "title" => "Access Control",
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_admin_access_form"),
    "access arguments" => array("administer rpforum access control"),
    "weight" => 20,
    "type" => MENU_LOCAL_TASK,
  );

  $items["admin/settings/rpforum/tools"] = array(
    "title" => "Tools",
    "page callback" => "rpforum_admin_tools",
    "access arguments" => array("administer rpforums"),
    "weight" => 25,
    "type" => MENU_LOCAL_TASK,
  );
  

  $items["admin/settings/rpforum/forums"] = array(
    "title" => "Forums",
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_admin_forums_form"),
    "access arguments" => array("administer rpforums"),
    "weight" => 5,
    "type" => MENU_LOCAL_TASK,
  );
  
  
//  $items["admin/settings/rpforum/forums"] = array(
//    "title" => "Forums",
//    "page callback" => "rpforum_admin_forums",
//    "access arguments" => array("administer rpforums"),
//    "weight" => 5,
//    "type" => MENU_LOCAL_TASK,
//  );

 
  $items["admin/settings/rpforum/add/%"] = array(
    "title" => "Add forum or container",
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_admin_edit_forum_form", 4),
    "access arguments" => array("administer rpforums"),
    "type" => MENU_CALLBACK,
  );
  
  $items["admin/settings/rpforum/edit/%/%"] = array(
    "title" => "Edit forum or container",
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_admin_edit_forum_form", 4, 5),
    "access arguments" => array("administer rpforums"),
    "type" => MENU_CALLBACK,
  );
  
  
  // TODO:  check to see if this is enabled in the variables table
  $items["user/%user/edit-profile"] = array(
    "title" => "Edit forum profile",
    "page callback" => "drupal_get_form",
    "page arguments" => array("rpforum_user_profile_form", 1),
    "access arguments" => array("access rpforums"),
    "type" => MENU_CALLBACK,
  );
  
  $items["$menu_base/search"] = array(
    "title" => "Forum search",
    "page callback" => "rpforum_display_search",
    "access arguments" => array("access rpforums"),
    "type" => MENU_LOCAL_TASK,
  );
  
  $items["$menu_base/feed"] = array(
    "page callback" => "rpforum_display_feed",
    "access callback" => true,
    "type" => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * This is our custom access function to see if the user is allowed
 * to access this forum at all.
 */
function rpforum_access_forum($tid, $node_nid = -1) {
  global $user;
  
  // If they lack the "access rpforums" permission, then they are NOT
  // allowed in.
  if (!user_access("access rpforums")) {
    return FALSE;
  }

  if ($node_nid != -1) {
    // We have been given a node's nid.  We need to find out
    // the forum tid from this.
    $node = node_load($node_nid);
    $tid = key($node->taxonomy);    
  }
  
  // If the user has the "administer rpforums" permission, they may always
  // do this.
  if (user_access("administer rpforums")) {
    return TRUE;
  }  
  
  // If the user is a moderator of this forum, they may always access it.
  if (rpforum_access_moderate_forum($tid, $node_nid)) {
    return TRUE;
  }
  
  // Otherwise, let's check to see if their user type is being explicitly
  // prevented
  
  $exclude_roles = variable_get("rpforum_exclude_view_$tid", array());
  foreach ($exclude_roles as $rid) {
    if ($rid > 0 && isset($user->roles[$rid]) && $user->roles[$rid] != "") {
      return FALSE;
    } 
  }
  
  
  // Else, return TRUE!  This is different than the access_moderate_forum function,
  // because we have already confirmed that they have the generic "access rpforums"
  // permission.  So if they made it this far, then they HAVEN'T been prevented
  // from accessing this particular forum.
  return TRUE;
  
}


/**
 * Our custom user access function to make sure the user is allowed
 * to moderate the forum in question.
 *
 */
function rpforum_access_moderate_forum($tid, $node_nid = -1) {
  global $user;
  if ($node_nid != -1) {
    // We have been given a node's nid.  We need to find out
    // the forum tid from this.
    $node = node_load($node_nid);
    $tid = key($node->taxonomy);    
  }
  
  // If the user has the "administer rpforums" permission, they may always
  // do this.
  if (user_access("administer rpforums")) {
    return TRUE;
  }

  // Is this user listed as a moderator of this forum?
  $temp = explode("\n", variable_get("rpforum_moderators_$tid", ""));
  foreach ($temp as $line) {
    $line = trim($line);    
    if ($line != "") {
      if ($line == $user->name) {        
        return TRUE;
      }
    }
  }
  
  
  // Else, return false
  return FALSE;
}


function rpforum_report_abuse_form($form_state, $tid, $topic_nid, $node_nid) {
  global $user;
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  $form = array();
  
  if (variable_get("rpforum_enable_report_abuse", 0) == 0) {
    drupal_set_message(t("Sorry, but that function is not available."));
    drupal_goto("<front>");
    return;
  }
  
  //////////////////////////////////////////
  $ip = $_SERVER['REMOTE_ADDR'];
  $min_wait = variable_get("rpforum_min_time_between_reports", "5");
  // Check to make sure this user hasn't submitted a report before the
  // $min_wait number of seconds.
  $before_time = time() - ($min_wait * 60); // If their last post was BEFORE this
                                     // time, they are okay.
  // Check the watchdog table for an abuse report from this user
  // greater than the before_time.  This would mean we should prevent
  // them from continuing.
  $res = db_result(db_query("SELECT wid FROM {watchdog} 
                              WHERE type = 'rpforum abuse'
                              AND uid = %d
                              AND hostname = '%s'
                              AND timestamp > %d
                              LIMIT 1 ", $user->uid, $ip, $before_time));
  if ($res != "") {
    drupal_set_message(t("Sorry, but you must wait at least @min_wait minutes
                        between abuse reports.  Please wait a few minutes,
                        then try again.", array("@min_wait" => $min_wait)), "warning");
    drupal_goto("$menu_base/$tid/$topic_nid");
  }                                     
  ///////////////////////////////////////////
  
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");      
  
  $node = node_load($node_nid);
  $node->from_feed = TRUE;
  drupal_set_title(t("Report abuse for") . " <em>$node->title</em>?");

  $form["markup"][] = array(
    "#value" => t("Are you sure you wish to report abuse for this post:") . "
          <div class='rpforum-confirm-delete'>" . node_view($node, true) . "</div>
          ",
  );
  
  $form["explain"] = array(
    "#title" => "Please explain",
    "#type" => "textarea",
    "#description" => t("Please explain why you are reporting this post as abuse."),
  );
  
  $form["nid"] = array(
    "#type" => "hidden",
    "#value" => $node_nid,
  );
  
  $form["submit"] = array(
    "#type" => "submit",
    "#value" => "Submit",
  );
  
  
  $form["#redirect"] = "$menu_base/$tid/$topic_nid";
  
  return $form;
}

function rpforum_report_abuse_form_submit($form, $form_state) {

  global $user;
  $username = check_plain($user->name);
  $ip = $_SERVER['REMOTE_ADDR'];
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  $nid = $form_state["values"]["nid"];
  $explain = check_plain($form_state["values"]["explain"]);
  
  $node = node_load($nid);
  $node_title = check_plain($node->title);
    
  // Send the email...
  $msg = "";
  $msg .= t("A post on the forum has been flagged as abuse.") . "\n\n";
  $msg .= "Post: $node_title\n";
  $msg .= "Link: " . $GLOBALS["base_url"] . "/$menu_base?find=$nid" . "\n\n";
  $msg .= "User reporting: $username (" . $GLOBALS["base_url"] . "/user/$user->uid)\nIP: $ip\n\n";
  $msg .= "Explanation:\n   $explain";
  
  
  $subject = t("Forum abuse report");
  $headers = "From: " . variable_get("site_mail", "no-reply@no-reply.com");
    
  $tomail = variable_get("rpforum_report_abuse_tomail", "");
  
  if ($tomail) {
    mail($tomail, $subject, $msg, $headers);  
  }
  
  // Now, also put this into the watchdog table so we can
  // query later to make sure the user isn't trying to send these too quickly.
  watchdog("rpforum abuse", "Abuse report: for the post $node_title (nid: $nid). Emailed message: $msg");
  
  drupal_set_message(t("The post has been flagged as possibly abusive, and 
                      an administrator has been notified."));
  
}


/**
 * Used to split the topic so that the supplied node becomes a new topic, and every node
 * posted after it (in the original topic) are under IT.
 *
 * @param unknown_type $form_state
 * @param unknown_type $nid
 */
function rpforum_split_topic_form($form_state, $nid) {
  $form = array();
  $node = node_load($nid);
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");
  
  $name = $node->name;
  if ($node->uid == 0) {
    if ($node->field_anon_name[0]["value"] != "") {
        $name = check_plain($node->field_anon_name[0]["value"]);
    }
  }
  
  drupal_set_title(t("Split topic, so that <em>@node_title by @name</em> becomes a new topic?", array("@node_title" => $node->title, "@name" => $name)));
  
  $starting_node = node_load($node->field_parent_node[0]["value"]);
  $parent_nid = $starting_node->nid;
  $from_tid = key($starting_node->taxonomy);  
  
  
  $form["new_title"] = array(
    "#title" => "New topic's title",
    "#type" => "textfield",
    "#required" => TRUE,
    "#default_value" => $node->title,
    "#description" => t("When this post becomes a new topic, what should it's title be?"),
  );
  
  $form["mark" . $m++] = array(
    "#value" => "<div>" . t("Please select a forum below where the new topic will be inserted.  All posts
                 under this post will be moved along with it.
                 You may only move posts into a forum in which you are
                 a moderator.") . "</div>
                 <ul>",
  );
  
  
  // Let's get all of the containers and forums which we might move to.
  $containers = variable_get("rpforum_containers", array());
  $vid = variable_get('rpforum_nav_vocabulary', '');  

  foreach ($containers as $tid) {
    $container = taxonomy_get_term($tid);
    if ($container->vid != $vid) continue;
    
    // Now, look for children of these tid's!
    $form["mark" . $m++] = array(
      "#value" => "<li>$container->name
                    <ul>",
    );

    $children = taxonomy_get_children($tid);
    foreach($children as $ctid => $forum) {
      if (!rpforum_access_moderate_forum($ctid)) continue;
      
      $form["forum_$ctid"] = array(
        "#title" => $forum->name,
        "#type" => "radio",
        "#return_value" => $ctid,
        "#parents" => array("selected_forum"),
        "#prefix" => "<li>",
        "#suffix" => "</li>",
      );
      if ($from_tid == $ctid) {
        $form["forum_$ctid"]["#title"] .= " <strong>[" . t("Current") . "]</strong>";
        $form["forum_$ctid"]["#attributes"] = array("checked" => "checked");
      }
    
      // Check for subforums
      $subforums = taxonomy_get_children($ctid);
      if (count($subforums) > 0 ) {

        $form["mark" . $m++] = array("#value" => "<li><ul>");        
        
        foreach ($subforums as $sctid => $subforum) {
    
          if (!rpforum_access_moderate_forum($sctid)) continue;
    
          
          $form["forum_$sctid"] = array(
            "#title" => $subforum->name,
            "#type" => "radio",
            "#return_value" => $sctid,
            "#parents" => array("selected_forum"),
            "#prefix" => "<li>",
            "#suffix" => "</li>",
          );
          if ($from_tid == $sctid) {
            $form["forum_$sctid"]["#title"] .= " <strong>[" . t("Current") . "]</strong>";
            $form["forum_$sctid"]["#attributes"] = array("checked" => "checked");
          }       
        }

        $form["mark" . $m++] = array("#value" => "</ul></li>");        
        
      } // if count > 0           
      
      
    }
    
    $form["mark" . $m++] = array(
      "#value" => "     </ul>
                    </li>",
    );
    
  }  
  
  
  
  $form["mark" . $m++] = array(
    "#value" => "</ul>",
  );
  
  $form["nid"] = array(
    "#type" => "hidden",
    "#value" => $nid,
  );
  
  $form["parent_nid"] = array(
    "#type" => "hidden",
    "#value" => $parent_nid,
  );
  
  
  $form["from_tid"] = array(
    "#type" => "hidden",
    "#value" => $from_tid,
  );
  
  
  $form["submit"] = array(
    "#type" => "submit",
    "#value" => "Split topic",
    "#suffix" => "<a href='javascript: history.go(-1);'>" . t("Cancel") . "</a>",
  );  
  
  
  
  return $form;
}


function rpforum_split_topic_form_submit($form, $form_state) {
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  $nid = $form_state["values"]["nid"];
  $new_title = $form_state["values"]["new_title"];
  $parent_nid = $form_state["values"]["parent_nid"];
  $from_tid = $form_state["values"]["from_tid"];
  $selected_forum = $form_state["values"]["selected_forum"];
  
  $selected_tax = taxonomy_get_term($selected_forum);

  // First things first-- assign the new title to our new topic.
  db_query("UPDATE {node} SET title = '%s' WHERE nid = %d", $new_title, $nid);
  
  // Now, find all of the posts in the original topic.
  $replies_array = rpforum_get_replies_to_post($parent_nid, TRUE);
  $bool_found_it = FALSE;
  foreach($replies_array as $rnid) {
    
    $new_parent_nid = $nid;
    
    if (!$bool_found_it && $rnid != $nid) {
      continue;
    }
    else if ($nid == $rnid) {
      $bool_found_it = TRUE;
      $new_parent_nid = -1;
    }
    
    // If we are here, it means we are looking at a node that IS or is AFTER our post.  
    // So, set it's parent_node
    // to our new topic.
    db_query("UPDATE {content_type_rp_forum_post}
              SET field_parent_node_value = %d
              WHERE nid = %d", $new_parent_nid, $rnid);

    // Also, go ahead and change it's taxonomy (what forum its under)
    db_query("UPDATE {term_node} 
            SET tid = %d
            WHERE tid = %d
            AND nid = %d", $selected_forum, $from_tid, $rnid);
   
  }

  // Okay, they have all been moved.  Now, we need to redirect the user
  // somewhere and display a success message.
  
  drupal_set_message(t("The new topic <em>@new_title</em> has been created,
                      and all its replies have been moved to the
                      <em>@selected_tax_name</em> forum.", array("@new_title" => check_plain($new_title), "@selected_tax_name" => $selected_tax->name)));
  
  rpforum_rebuild_topic_reply_counts(FALSE);

  cache_clear_all("*", "cache_content", TRUE);
  
  
  drupal_goto("$menu_base/$selected_forum/$nid");
}

/**
 * Similar to the move_topic_form, this form lets an administrator
 * move an individual post to be under another topic (in actuality, it only
 * needs to change it's parent_node value).
 *
 * @param unknown_type $form_state
 * @param unknown_type $nid
 */
function rpforum_move_post_form($form_state, $nid) {
  $form = array();
  $node = node_load($nid);
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");
  
  $name = $node->name;
  if ($node->uid == 0) {
    if ($node->field_anon_name[0]["value"] != "") {
        $name = check_plain($node->field_anon_name[0]["value"]);
    }
  }
  
  drupal_set_title(t("Move <em>@node_title by @name</em> to a different topic?", array("@node_title" => $node->title, "@name" => $name)));
  
  $form["markup" . $m++] = array(
    "#value" => t("You may use this form to move the post to a different,
                  existing topic.  Only this single post will be moved.  
                  You may only move into a forum in which you are
                  a moderator.
                  Its submitted date/time will be reset to current,
                  so that it will sort to the bottom of the new topic.") . "
                  <ul>",
  );
  
  // Let's get all of the containers and forums which we might move to.
  $containers = variable_get("rpforum_containers", array());
  $vid = variable_get('rpforum_nav_vocabulary', '');  

  foreach ($containers as $tid) {
    $container = taxonomy_get_term($tid);
    if ($container->vid != $vid) continue;
    
    // Now, look for children of these tid's!
    $form["markup" . $m++] = array(
      "#value" => "<li>$container->name
                    <ul>",
    );

    $children = taxonomy_get_children($tid);
    foreach($children as $ctid => $forum) {
      if (!rpforum_access_moderate_forum($ctid)) continue;
      
      $form["markup" . $m++] = array(
        "#value" => "<li><b>$forum->name</b>
                        <ul>",
      );

      
      $topics = rpforum_get_topics_in_forum($ctid);

      /*if ($from_tid == $ctid) {
        $form["forum_$ctid"]["#title"] .= " <strong>[Current]</strong>";
        $form["forum_$ctid"]["#attributes"] = array("checked" => "checked");
      }*/
    
      foreach ($topics as $topic) {
        $tnid = $topic["nid"];
        
        $form["topic_select_$tnid"] = array(
          "#title" => $topic["title"],
          "#type" => "radio",
          "#parents" => array("selected_topic"),
          "#return_value" => $tnid,
          "#prefix" => "<li class='rpforum-move-post'>",
          "#suffix" => " - " . l(t("view"), "$menu_base", array("query" => "find=$tnid", "attributes" => array("target" => "_blank"))) . "</li>",          
        );
        
        if ($node->field_parent_node[0]["value"] == $tnid) {
          $form["topic_select_$tnid"]["#title"] .= " <strong>[" . t("Current") . "]</strong>";
          $form["topic_select_$tnid"]["#attributes"] = array("checked" => "checked");
        }        
        
      }
      
     
      
      // Check for subforums
      $subforums = taxonomy_get_children($ctid);
      if (count($subforums) > 0 ) {

            
        
        foreach ($subforums as $sctid => $subforum) {
    
          if (!rpforum_access_moderate_forum($sctid)) continue;
    
          $form["markup" . $m++] = array("#value" => "<li><b>$subforum->name</b>
                                                  <ul>");             
          
          // Now, posts under the subforum!
          $topics = rpforum_get_topics_in_forum($sctid);
              
          foreach ($topics as $topic) {
            $tnid = $topic["nid"];
            
            $form["topic_select_$tnid"] = array(
              "#title" => $topic["title"],
              "#type" => "radio",
              "#parents" => array("selected_topic"),
              "#return_value" => $tnid,
              "#prefix" => "<li class='rpforum-move-post'>",
              "#suffix" => " - " . l(t("view"), "$menu_base", array("query" => "find=$tnid", "attributes" => array("target" => "_blank"))) . "</li>",          
            );
            
            if ($node->field_parent_node[0]["value"] == $tnid) {
              $form["topic_select_$tnid"]["#title"] .= " <strong>[" . t("Current") . "]</strong>";
              $form["topic_select_$tnid"]["#attributes"] = array("checked" => "checked");
            }        
            
          }          
          
          
          $form["markup" . $m++] = array("#value" => "</ul></li>");        
          
        }

        
        
      } // if count > 0           
       
      
      
       
      $form["markup" . $m++] = array(  
        "#value" => "</ul></li>",
      );
      
    }
    
    $form["markup" . $m++] = array(
      "#value" => "</ul></li>",
    );
    
  }  
  
  $form["markup" . $m++] = array(
    "#value" => "</ul>",
  );
  
  $form["nid"] = array(
    "#type" => "hidden",
    "#value" => $nid,
  );
  
  $form["submit"] = array(
    "#type" => "submit",
    "#value" => t("Move post"),
    "#suffix" => "<a href='javascript: history.go(-1);'>" . t("Cancel") . "</a>",
  );  
  
  
  return $form;
}



function rpforum_move_post_form_submit($form, $form_state) {
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  $nid = $form_state["values"]["nid"];
  $node = node_load($nid);
  $selected_topic = $form_state["values"]["selected_topic"];
  $selected_topic_node = node_load($selected_topic);
  
  // Now, all we really need to do is update
  // the field_parent_node of our original post,
  // as well as taxonomy and the created value should be updated.
  
  $node->taxonomy = $selected_topic_node->taxonomy;
  $node->field_parent_node[0]["value"] = $selected_topic;
  $node->created = time();
  
  $node->noredirect = TRUE;
  node_save($node);
  
  drupal_set_message(t("The post has been moved to the bottom of the
                      <em>@sel_title</em> topic.", array("@sel_title" => $selected_topic_node->title)) . " "
                      . l("Go to post", "$menu_base", array("query" => "find=$nid")));
  
  rpforum_rebuild_topic_reply_counts(FALSE);
  cache_clear_all("*", "cache_content", TRUE);
                      
  drupal_goto("$menu_base/" . key($node->taxonomy) . "/$selected_topic");  
  
}


/**
 * Returns an associative array containing topic information
 * within a forum, ordered the same way the display_topics view is.
 *
 * @param unknown_type $tid
 */
function rpforum_get_topics_in_forum($tid) {
  $rtn = array();
  
  $query = "
    SELECT node.nid AS nid,
     node_data_field_parent_node.field_message_icon_value AS node_data_field_parent_node_field_message_icon_value,
     node.type AS node_type,
     node.vid AS node_vid,
     node.title AS node_title,
     users.name AS users_name,
     users.uid AS users_uid,
     node.sticky AS node_sticky,
     node_data_field_parent_node.field_parent_node_value AS node_data_field_parent_node_field_parent_node_value,
     node_data_field_parent_node.field_anon_name_value AS node_data_field_parent_node_field_anon_name_value,
     node.changed AS node_changed
   FROM {node} node 
   LEFT JOIN {content_type_rp_forum_post} node_data_field_parent_node ON node.vid = node_data_field_parent_node.vid
   INNER JOIN {term_node} term_node ON node.vid = term_node.vid
   INNER JOIN {users} users ON node.uid = users.uid
   WHERE (node.type in ('rp_forum_post')) AND ((node_data_field_parent_node.field_parent_node_value) = ('-1')) AND (term_node.tid = %d) AND node.status = 1
     ORDER BY node_sticky DESC, node_changed DESC
            ";
  $res = db_query($query, $tid);
  while ($cur = db_fetch_array($res)) {

    $rtn[] = array(
      "nid" => $cur["nid"],
      "title" => $cur["node_title"],
      "name" => $cur["users_name"],
      "anon_name" => $cur["node_data_field_parent_node_field_anon_name_value"],
      "changed" => $cur["node_changed"],
    );
  }
  
  return $rtn;
  
}


/**
 * This form is displayed when the administrator wishes to move
 * a topic to a new forum.
 *
 * @param unknown_type $form_state
 * @param unknown_type $nid
 */
function rpforum_move_topic_form($form_state, $nid) {
  $form = array();

  $starting_node = node_load($nid);
  
  drupal_set_title("Move <em>$starting_node->title</em> to new forum");
  
  $from_tid = key($starting_node->taxonomy);  
  
  $form["mark" . $m++] = array(
    "#value" => "<div>" . t("Please select a new forum to move this topic to.  All posts
                 under this topic will be moved.
                 You may only move into a forum in which you are
                  a moderator.") . "
                  </div>
                 <ul>",
  );
  
  
  // Let's get all of the containers and forums which we might move to.
  $containers = variable_get("rpforum_containers", array());
  $vid = variable_get('rpforum_nav_vocabulary', '');  

  foreach ($containers as $tid) {
    $container = taxonomy_get_term($tid);
    if ($container->vid != $vid) continue;
    
    // Now, look for children of these tid's!
    $form["mark" . $m++] = array(
      "#value" => "<li>$container->name
                    <ul>",
    );

    $children = taxonomy_get_children($tid);
    foreach($children as $ctid => $forum) {
      if (!rpforum_access_moderate_forum($ctid)) continue;
      
      $form["forum_$ctid"] = array(
        "#title" => $forum->name,
        "#type" => "radio",
        "#return_value" => $ctid,
        "#parents" => array("selected_forum"),
        "#prefix" => "<li>",
        "#suffix" => "</li>",
      );
      if ($from_tid == $ctid) {
        $form["forum_$ctid"]["#title"] .= " <strong>[" . t("Current") . "]</strong>";
        $form["forum_$ctid"]["#attributes"] = array("checked" => "checked");
      }
    
      // Check for subforums
      $subforums = taxonomy_get_children($ctid);
      if (count($subforums) > 0 ) {

        $form["mark" . $m++] = array("#value" => "<li><ul>");        
        
        foreach ($subforums as $sctid => $subforum) {
    
          if (!rpforum_access_moderate_forum($sctid)) continue;
    
          
          $form["forum_$sctid"] = array(
            "#title" => $subforum->name,
            "#type" => "radio",
            "#return_value" => $sctid,
            "#parents" => array("selected_forum"),
            "#prefix" => "<li>",
            "#suffix" => "</li>",
          );
          if ($from_tid == $sctid) {
            $form["forum_$sctid"]["#title"] .= " <strong>[" . t("Current") . "]</strong>";
            $form["forum_$sctid"]["#attributes"] = array("checked" => "checked");
          }       
        }

        $form["mark" . $m++] = array("#value" => "</ul></li>");        
        
      } // if count > 0
      
     
       
    }
    
    $form["mark" . $m++] = array(
      "#value" => "     </ul>
                    </li>",
    );
    
  }  
  
  
  
  $form["mark" . $m++] = array(
    "#value" => "</ul>",
  );
  
  $form["nid"] = array(
    "#type" => "hidden",
    "#value" => $nid,
  );
  
  $form["from_tid"] = array(
    "#type" => "hidden",
    "#value" => $from_tid,
  );
  
  
  $form["submit"] = array(
    "#type" => "submit",
    "#value" => "Move topic",
    "#suffix" => "<a href='javascript: history.go(-1);'>" . t("Cancel") . "</a>",
  );
  
  return $form;
  
}


function rpforum_move_topic_form_submit($form, $form_state) {

  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  $nid = $form_state["values"]["nid"];
  $from_tid = $form_state["values"]["from_tid"];
  $selected_forum = $form_state["values"]["selected_forum"];
  
  $selected_tax = taxonomy_get_term($selected_forum);
  // Okay, move the node and all posts under it to its new forum (taxonomy)
  // Do this by simply updating the term_node table.
  $replies_array = rpforum_get_replies_to_post($nid, TRUE);

  foreach ($replies_array as $rnid) {
    db_query("UPDATE {term_node} 
            SET tid = %d
            WHERE tid = %d
            AND nid = %d", $selected_forum, $from_tid, $rnid);
  }

  // Okay, they have all been moved.  Now, we need to redirect the user
  // somewhere and display a success message.
  
  drupal_set_message(t("The topic and all its replies have been moved to the
                      <em>@sel_name</em> forum.", array("@sel_name" => $selected_tax->name)));
  
  cache_clear_all("*", "cache_content", TRUE);
  
  drupal_goto("$menu_base/$selected_forum/$nid");
  
}

function rpforum_display_feed() {
  // This function will generate the feed XML for recent posts
  // on the site.
  // TODO:  We should probably cache this or something, and only generate it once
  // every 15 minutes.
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  $rpforum_title = htmlentities(variable_get("rpforum_title", "RP Forum"));
  $feed_title = htmlentities(variable_get("rpforum_feed_title", "Recent forum posts"));
  
  $rtn = "";
  
  // Head of the xml feed...
  // TODO:  on settings page, configure this stuff.
  $atom_now = date('Y-m-d\TH:i:s\Z', time()); // get atom timestamp.
  $link_self = $GLOBALS["base_url"] . "/$menu_base/feed";
  $link_forum = $GLOBALS["base_url"] . "/$menu_base";
  $author_name = $rpforum_title;
  $feed_id = md5($rpforum_title . "-feed");
  
  $rtn .= '<?xml version="1.0" encoding="UTF-8"?>
    
    <feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/">
    <id>' . $link_forum . '</id>
    <updated>' . $atom_now . '</updated>
    <title type="text">' . $feed_title . '</title>
    <link rel="alternate" type="text/html" href="' . $link_forum . '"/>
    <link rel="self" type="application/atom+xml" href="' . $link_self . '"/>
    <author>
     <name>' . $author_name . '</name>
     <uri>' . $link_forum . '</uri>
     <email>noreply@no-reply.com</email>
    </author> 
    ';
    /*
    <openSearch:totalResults>5</openSearch:totalResults>
    <openSearch:startIndex>1</openSearch:startIndex>
    <openSearch:itemsPerPage>5</openSearch:itemsPerPage>
    */   
    
  
  $query = "
            SELECT node.nid AS nid,
             node.created AS node_created
            FROM {node} node 
            WHERE (node.promote <> 0) AND (node.type in ('rp_forum_post'))
              AND node.status = 1
            ORDER BY node_created DESC
            LIMIT 200
          ";
  $res = db_query($query);
  
  while ($cur = db_fetch_array($res)) {
    $node = node_load($cur["nid"]);
    
    $node->from_feed = TRUE;
    
    $atom_published = date('Y-m-d\TH:i:s\Z', $node->created); // get atom timestamp.
    $atom_updated = date('Y-m-d\TH:i:s\Z', $node->changed); // get atom timestamp.
    
    $title = htmlentities($node->title);
    
    if (is_array($node->taxonomy)) {
      
      $content = htmlspecialchars(node_view($node, true, false));
      
      $tid = key($node->taxonomy);
      $topic_nid = ($node->field_parent_node[0]["value"] == "-1") ? $node->nid : $node->field_parent_node[0]["value"];
      $topic_url = "$menu_base/$tid/$topic_nid";
      $img_path = $GLOBALS["base_url"] . "/" . drupal_get_path("module", "rpforum") . "/style/images";
      $self_link = $GLOBALS["base_url"] . "/$topic_url?goto=$node->nid";
      $topic_link = $GLOBALS["base_url"] . "/$topic_url";
      
      $name = htmlentities($node->name);
      if ($name == "") $name = "Guest";
      
      $entry = '
              <entry>
               <id>' . $self_link . '</id>
               <published>' . $atom_published . '</published>
               <updated>' . $atom_updated . '</updated>
               <title type="html">' . $title . '</title>
               <content type="html">' . $content . '</content>
               
              <link rel="alternate" type="text/html" href="' . $self_link . '" />          
               <author>
                <name>' . $name . '</name>
                
                <email>noreply@no-reply.com</email>
               </author>
               <thr:in-reply-to xmlns:thr="http://purl.org/syndication/thread/1.0" href="' . $topic_link . '" type="text/html"/>
               </entry>';
      
      $rtn .= $entry;
      
    }
    
  }
  
  $rtn .= "
          </feed>";
    
  $rtn = rpforum_force_good_chars_only($rtn);  // valid chars only please
  
  
  drupal_set_header("Content-type: application/atom+xml");
  print $rtn;  
  
}

function rpforum_force_good_chars_only($str) {
  $newstr = "";
  
	$good[] = 9;  #tab
	$good[] = 10; #nl
	$good[] = 13; #cr
	for($a=32;$a<127;$a++){
		$good[] = $a;
	}
	$len = strlen($str);
	for($b=0;$b < $len+1; $b++){
		if(in_array(ord($str[$b]), $good)){
			$newstr .= $str[$b];
		}//fi
	}//rof  
  
  return $newstr;
}


function rpforum_get_author_details($uid) {
  // TODO:  Should use the caching stuff from get_author_posts
  $rtn = array();
  if ($uid == 0) {
    return array(
      "author_type" => "Guest",
      "posts" => "n/a",
    );
  };
    
  $rtn["posts"] = rpforum_get_author_posts($uid);
  
  // Figure out the author type based on the posts.
  
  // First, what tier is it?
  for ($t = 1; $t <= 5; $t++) {
    if ($rtn["posts"] >= variable_get("rpforum_badge_posts_$t", ($t - 1) * 75) ) {
      $rtn["tier"] = $t;
    }
  }
  
  // Get the tier title as "author_type"
  $rtn["author_type"] = variable_get("rpforum_badge_title_" . $rtn["tier"], "Registered User");
  
  return $rtn;
}

function rpforum_get_author_posts($uid) {
  // Retrieve the number of posts this author has made for the forum.
  // TODO:  This might be optimized by caching or something.  Even as simple
  // as putting into a session variable which gets cleared with
  // the current saves a node.
  
  $count = db_result(db_query("SELECT COUNT(uid) as count
                             FROM {node}
                             WHERE uid = %d
                             AND type = 'rp_forum_post' ", $uid));
  
  return $count;
}


/**
 * Enter description here...
 *
 * @param unknown_type $nid
 * @param int $status - either 0 or 1 for false or true.
 */
function rpforum_make_topic_locked($nid, $status) {
  // This is similar to the make_topic_sticky function.  This will let us
  // set wether or not this topic is locked.  However, instead of using the
  // nodeapi to accomplish anything, we will simply keep track of it in our
  // rpforum_post_details table.

  // Will need this later.
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  $node = node_load($nid);
  $tid = key($node->taxonomy);  
  
  // This should be pretty straight forward.  We will get the existing details
  // array, if any exists, update with our status, and save again.
  $details = rpforum_get_post_details($nid);
  $details["locked"] = $status;
  rpforum_set_post_details($nid, $details);
  
  // Now, set a message.
  if ($status == "1") {
    drupal_set_message(t("Topic has been set as locked (closed).  No one
                        may post in this topic."));  
  }
  else {
    drupal_set_message(t("Topic is no longer set as locked.  It is now
                        open to posts like any other topic."));      
  }
  
  
  drupal_goto("$menu_base/$tid/$nid");    
  
}

function rpforum_make_topic_sticky($nid, $status) {
  // This is fairly straight forward.  We will set the sticky flag
  // for the node specified by $nid.
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  $node = node_load($nid);
  $tid = key($node->taxonomy);
  // Verify this is indeed a topic node.
  if ($node->field_parent_node[0]["value"] != "-1") {
    drupal_set_message(t("The specified post is not a valid topic, and
                        cannot be set as sticky."));
    drupal_goto($menu_base);
    return;
  }
  
  // Otherwise, let's set it to sticky.
  $node->sticky = $status;
  $node->noredirect = true;
  $node->only_modified_sticky = true;
  node_save($node);
  
  if ($status == "1") {
    drupal_set_message(t("Topic has been set as sticky, and will appear
                      at the top of lists."));  
  }
  else {
    drupal_set_message(t("Topic is no longer set as sticky.  It will
                         sort normally in the list of topics."));      
  }
  
  
  drupal_goto("$menu_base/$tid/$nid");  
}


function rpforum_render_search_and_login($bool_force_search = false, $bool_force_login = false) {
  $rtn = "";

  
  if (variable_get("rpforum_enable_search_field", 1) == "1"
  || variable_get("rpforum_enable_login_account_field", 1) == "1"
  || $bool_force_login || $bool_force_search) {
        
 /*   $rtn .= "<div class='rpforum-search-top'>
                <table border='0' cellpadding='0' cellspacing='0' class='rpforum-search-table'>";
    if (variable_get("rpforum_enable_search_field", 1) == "1") {
     $rtn .= "<td class='search-td'>" . drupal_get_form("rpforum_search_form", "", true) . "</td>";
    }
    if (variable_get("rpforum_enable_login_account_field", 1) == "1") {
      $rtn .= "<td class='login-td'>" . rpforum_render_login_or_account() . "</td>";
    }  
   
    $rtn .= "</table>
             </div>";*/
    
 
   $rtn .= "<div class='rpforum-search-top'>
                ";
   
   
   if (variable_get("rpforum_enable_login_account_field", 1) == "1" || $bool_force_login) {
      $rtn .= "<div class='login-wrapper'>" . rpforum_render_login_or_account() . "</div>";
   }  
   
   if (variable_get("rpforum_enable_search_field", 1) == "1" || $bool_force_search) {
     $rtn .= "<div class='search-wrapper'>" . drupal_get_form("rpforum_search_form", "", true) . "</div>";
    }
    
 
    
    $rtn .= "</div>";
 
    $rtn .= "<div style='clear: both;'></div>";
    
  }
  
  return $rtn;
  
}


function rpforum_display_main()
{
  // The main entry point for the forums.
  $rtn = "";
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  $vid = variable_get('rpforum_nav_vocabulary', '');  
  
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");

  $find = $_REQUEST["find"];
  if ($find != "") {
     // We are being asked to find a specific node.  This is easy enough, all we have
    // to do is load it's node and find it's tid, and then do a drupal_goto which will redirect there.
    if ($new_node = node_load($find)) {
      $tid = key($new_node->taxonomy);
      // What is the node's parent?  If it's -1, we can just go to the node.  If
      // not, we go to the parent node, with THIS node as an anchor.
      if ($new_node->field_parent_node[0]["value"] == -1) {      
        drupal_goto("$menu_base/$tid/$new_node->nid");
      }
      else {
        drupal_goto("$menu_base/$tid/{$new_node->field_parent_node[0]["value"]}", "goto=$new_node->nid");
      }
      
      return;
    }
        
  }
  
  
  $rtn .= rpforum_render_search_and_login();
  if (variable_get("rpforum_enable_search_field", 1) == "1") {
    $extra_style = "rpforum-search-enabled";
  }
  
  $rtn .= "<div class='rpforum-page-main rpforum-style-default $extra_style'>";
  // Let's display the top-level containers and forums!
  $containers = variable_get("rpforum_containers", array());

  $is_empty = true;
  // Should the container name be a link?
  $container_name_is_link = variable_get("rpforum_container_name_is_link", 1);
  
  foreach ($containers as $tid) {
    $container = taxonomy_get_term($tid);
    if ($container->vid != $vid) continue;
    
    $is_empty = false;
        
    // Now, look for children of these tid's!
    $rtnC = "";
    $container_is_empty = TRUE;
    $container_link = l("$container->name", "$menu_base/$tid");
    if ($container_name_is_link == 0) {
      $container_link = $container->name;
    }
    
    $all_excluded = TRUE;
    $rtnC .= "<table class='container-forums container-forums-$tid <!--TABLE_CLASS--> '>
              <tr>                
                <th class='rp-th-name' colspan='2'>" . $container_link . "</th>
                <th class='forum-topics'>" . t("Topics") . "</th>
                <th class='forum-posts'>" . t("Posts") . "</th>
                <th class='rp-th-last-post'>" . t("Last post") . "</th>
              </tr>";
    
    if (trim($container->description) != "") {
      $rtnC .= "<tr>
                <td colspan='10'>
                  <div class='rpforum-container-description'>$container->description</div>
                </td>
                </tr>";
    }
    
    $children = taxonomy_get_children($tid);
    $pol = "odd";
    foreach($children as $ctid => $forum) {
            
      $forum_row = rpforum_render_forum_row($forum, $pol, $menu_base, true);
      if ($forum_row != "") {
        $rtnC .= $forum_row;
        $container_is_empty = FALSE;
      }
      
      // Is our "all excluded" comment within the returned HTML?  If so, it means
      // every forum and subforum was excluded from view.
      if (!strstr($rtnC, "<!--ALL_EXCLUDED_$ctid-->")) {
        $all_excluded = FALSE;
      }
      
      $pol = ($pol == "odd") ? "even" : "odd"; 
    }
    $rtnC .= "</table>";
    
    // Every forum and subforum in here was excluded, so 
    // lets add a special CSS class to the table.
    if ($all_excluded) {
      $rtnC = str_replace("<!--TABLE_CLASS-->", " container-forums-all-excluded container-forums-$tid-all-excluded ", $rtnC);
    }
    else {
       $rtnC = str_replace("<!--TABLE_CLASS-->", " ", $rtnC);
    }
    
    
    if (!$container_is_empty) {
      $rtn .= "<div class='rpforum-container'>";
      $rtn .= $rtnC;
      $rtn .= "</div>";
    }
    
    
  }
  
  if ($is_empty == true) {
    $rtn .= "<div>" . t("It looks like this RP Forum has not been set up yet.
              visit ") . l("admin/settings/rpforum", "admin/settings/rpforum") . t("
              to configure.  You must create at least one Container,
              then place at least one Forum inside the container.") . "</div>";
  }
  
  
  // Feed icon...
  if (variable_get("rpforum_enable_feed_icon", 1) == "1") {
    $rtn .= "<div class='rpforum-feed-link'>";
    $rtn .= l(t("Feed"), "$menu_base/feed");
    $rtn .= "</div>";
  }
  
  $rtn .= "</div>";
  
  
  
  return $rtn;
}


/**
 * This function is called by display_main.  It is meant to return back HTML
 * which is meant to be displayed in a table row.
 * 
 * $forum_term is meant to be an object, gotten from $arr = taxonomy_get_children(tid); then,
 * foreaching like so:
 * foreach ($arr as $tid => $forum_term)
 *
 */
function rpforum_render_forum_row($forum_term, $pol = "odd", $menu_base = "rpforum", $bool_display_subforums = false) {
  
  $rtn = "";
    
  $ctid = $forum_term->tid;
  
  $icon_type = "forum-icon-folder";
  $extra_css_tr = "";
  $all_excluded = TRUE;
  // Make sure this user has access to view this forum.  If they do not,
  // then skip it.
  $exclude_behavior = variable_get('rpforum_excluded_forum_behavior', 'hide');
  if (!rpforum_access_forum($ctid)) {    
    if ($exclude_behavior == "hide") {
      return;
    }
    else {
      $is_exclude = TRUE;
      $extra_css_tr = "forum-row-excluded forum-row-excluded-$pol forum-row-excluded-$ctid";
    }
  }
  else {
    $all_excluded = FALSE;
  }
  
  $subforums = array();
  
  if ($bool_display_subforums) {
    $subforums = taxonomy_get_children($ctid);
  }  
  
  $container_is_empty = FALSE;
  $rtn .= "<tr class='forum-row forum-row-$ctid forum-row-$pol $extra_css_tr <!--TR_EXTRA--> '>
            <td class='forum-icon $icon_type'>&nbsp;</td>
            <td class='forum-name-description'>
                <div class='forum-name'>";
  if (!$is_exclude) {
    // Display normally.
    $rtn .= l($forum_term->name, "$menu_base/$ctid");
  }
  else {
    // Should be excluded, so do not display as a link.
    $rtn .= $forum_term->name;
  }
  
  $rtn .= "</div>
                <div class='forum-description'>$forum_term->description</div>
                ";
  if (count($subforums) > 0) {
    // There are subforums!
    $rtn .= "<div class='forum-subforums'>";
    $rtn .= "<span class='subforum-label'><!--SUBFORUM_LABEL--></span> ";
    $sc = 0;
    $rtn .= "<span class='subforum-list'>";
    
    $subforums_is_empty = TRUE;
    foreach ($subforums as $sctid => $sforum) {
      
      $is_sub_exclude = FALSE;
      
      if (!rpforum_access_forum($sctid)) {    
        if ($exclude_behavior == "hide") {
          continue;
        }
        else {
          $is_sub_exclude = TRUE;
          
        }
      }
      else {
        $all_excluded = FALSE;
      }
      
      if (!$is_sub_exclude) {
        // display normally
        $rtn .= l($sforum->name, "$menu_base/$sctid");
        $subforums_is_empty = FALSE;
      }
      else {
        // excluded.
        $rtn .= "<span class='subforum-list-excluded'>$sforum->name</span>";
      }
      
      $rtn .= ", ";
      
      $sc++;
    }
    // Remove the last comma and space.
    if (!$subforums_is_empty) {
      $rtn = substr($rtn, 0, -2);
      $rtn = str_replace("<!--SUBFORUM_LABEL-->", t("Subforums") . ":", $rtn);
    }
        
    $rtn .= "</span></div>";
   
  }
  
  $rtn .= "
            </td>
            <td class='forum-topics'>" . rpforum_get_topics_in_forum_count($ctid) . "</td>
            <td class='forum-posts'>" . rpforum_get_posts_in_forum_count($ctid) . "</td>";
  $last_post = rpforum_get_last_post_in_forum($ctid);
  
  $last_post_message = $last_post["message"];
  if ($is_exclude) {
    $last_post_message = $last_post["no_links_message"];
  }
  
  $rtn .= "<td class='forum-last-post'>$last_post_message</td>
            </tr>";  
   
  if ($all_excluded) {
    // Every forum or subforum rendered was excluded-- add in a special HTML comment
    // as well as a CSS attr to the table row.
    $rtn .= "<!--ALL_EXCLUDED_$ctid-->";
    $rtn = str_replace("<!--TR_EXTRA-->", " forum-row-all-excluded forum-row-$ctid-all-excluded forum-row-$pol-all-excluded ", $rtn);
  }
  else {
    $rtn = str_replace("<!--TR_EXTRA-->", " ", $rtn);
  }
  
  return $rtn;
  
}



function rpforum_get_topics_in_forum_count($tid) {
  // Returns how many topics (nodes with parent of -1) are
  // in this term, or forum.
  
  // To get this, we will query for it.
  $query = "
      SELECT count(node.nid) AS count
       FROM {node} node 
       LEFT JOIN {content_type_rp_forum_post} node_data_field_parent_node ON node.vid = node_data_field_parent_node.vid
       INNER JOIN {term_node} term_node ON node.vid = term_node.vid
       WHERE (node.type in ('rp_forum_post')) 
          AND ((node_data_field_parent_node.field_parent_node_value) = ('-1')) 
          AND (term_node.tid = %d)  
          AND node.status = 1
        ";
  $count = db_result(db_query($query, $tid));
  return $count;
}

function rpforum_get_replies_to_post_count($nid, $bool_use_replies_table = false) {
  // Count how many nodes are in reply to the nid post.
  // In other words, how many have nid as their parent_node.
  
  $query = "
      SELECT count(node.nid) AS count
     FROM {node} node 
     LEFT JOIN {content_type_rp_forum_post} node_data_field_parent_node ON node.vid = node_data_field_parent_node.vid
     WHERE (node.type in ('rp_forum_post')) AND ((node_data_field_parent_node.field_parent_node_value) = ('%d'))   
          AND node.status = 1
  ";
  
  if ($bool_use_replies_table) {
    $query = "SELECT count AS count FROM {rpforum_topic_replies}
              WHERE nid = %d";
  }
  
  $count = db_result(db_query($query, $nid));
  return $count*1;
}

/**
 * This function returns an array of all the nid's which are replies to a post.
 * If include_parent is true, the original nid is also in the list.
 *
 */
function rpforum_get_replies_to_post($nid, $bool_include_parent = TRUE) {
  
  $rtn = array();
  
  if ($bool_include_parent) {
    $rtn[] = $nid;
  }
  
  $query = "
      SELECT node.nid AS nid
     FROM {node} node 
     LEFT JOIN {content_type_rp_forum_post} node_data_field_parent_node ON node.vid = node_data_field_parent_node.vid
     WHERE (node.type in ('rp_forum_post')) AND ((node_data_field_parent_node.field_parent_node_value) = ('%d'))
          AND node.status = 1
     ORDER BY node.created   
  ";

  $res = db_query($query, $nid);
  while ($cur = db_fetch_array($res)) {
    $rtn[] = $cur["nid"];
  }
  
  return $rtn;
  
}

function rpforum_get_posts_in_forum_count($tid) {
  // Returns how many posts are in this term, or forum.
  // We will do a simple query.
  
  $query = "
      SELECT count(node.nid) AS count
       FROM {node} node 
       INNER JOIN {term_node} term_node ON node.vid = term_node.vid
       WHERE (node.type in ('rp_forum_post')) AND (term_node.tid = %d)  
          AND node.status = 1
          ";

  $count = db_result(db_query($query, $tid));
  return $count;  
}

function rpforum_get_last_post_in_topic($node_stub, $tid, $replies_count) {
  // Returns the most recent post for this topic.
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  $query = "
    SELECT node.nid AS nid,
       node.created AS node_created,
       users.name AS users_name,
       users.uid AS users_uid,
       node_data_field_parent_node.field_anon_name_value AS node_data_field_parent_node_field_anon_name_value
      
     FROM {node} node 
     LEFT JOIN {content_type_rp_forum_post} node_data_field_parent_node ON node.vid = node_data_field_parent_node.vid
     INNER JOIN {users} users ON node.uid = users.uid
     WHERE (node.type in ('rp_forum_post')) AND ((node_data_field_parent_node.field_parent_node_value) = ('%d'))
        AND node.status = 1
     ORDER BY node_created DESC
     LIMIT 1
      ";

  $res = db_query($query, $node_stub->nid);
  $cur = db_fetch_array($res);
  $msg = "";
  $img_path = $GLOBALS["base_url"] . "/" . drupal_get_path("module", "rpforum") . "/style/images";
  $last_link = l("<img src='$img_path/last_post.gif'> ", "$menu_base/$tid/$node_stub->nid", array("html"=>true, "query" => "goto=" . $cur["nid"]));
  
  // The last link doesn't really have to be a "perma link", so we do not need to use find=.  However, anything
  // advertised as a perma link DOES need to have the find= structure.
  //$last_link = l("&nbsp;", "$menu_base/$tid/$node_stub->nid", array("html"=>true, "query" => "goto=" . $cur["nid"]));
  
  $anon_name = $cur["node_data_field_parent_node_field_anon_name_value"];
  $user_obj = new stdClass();
  $user_obj->uid = $cur["users_uid"]*1;
  $user_obj->name = $cur["users_name"];
  
  if ($replies_count == 0) {
    // Meaning, node_stub IS the most recent post, so we should return it's information.
    $user_obj->uid = $node_stub->users_uid;
    $user_obj->name = $node_stub->users_name;
    $anon_name = $node_stub->node_data_field_parent_node_field_anon_name_value;    
  }
  
  $user_link = theme("username", $user_obj);
  if ($user_obj->uid == 0 && $anon_name != "") {
      $user_link = $anon_name; 
    }
  
  $by = t("by");
  
  if ($cur["node_created"] > $node_stub->node_changed) {
    // What was found was indeed the most recent post.
    
    $msg = "<div class='rpforum-message-last-on'>$last_link " . rpforum_format_date($cur["node_created"]) . "</div>
            <div class='rpforum-message-last-by'>$by $user_link</div>";
  } 
  else {

    $msg = "<div class='rpforum-message-last-on'>$last_link " . rpforum_format_date($node_stub->node_changed) . "</div>
            <div class='rpforum-message-last-by'>$by $user_link</div>";
  }
  
  
  
  return $msg;
  
}

function rpforum_get_last_post_in_forum($tid) {
  // Returns some data from the most recent post in a forum (based on the tid).
  // Again, a simple query is all we need.
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  $query = "
      SELECT node.nid AS nid,
         node_data_field_parent_node.field_parent_node_value AS node_data_field_parent_node_field_parent_node_value,
         node_data_field_parent_node.field_anon_name_value AS node_data_field_parent_node_field_anon_name_value,
         node.type AS node_type,
         node.vid AS node_vid,
         users.name AS users_name,
         users.uid AS users_uid,
         node.created AS node_created,
         node.title AS node_title
       FROM {node} node 
       INNER JOIN {term_node} term_node ON node.vid = term_node.vid
       LEFT JOIN {content_type_rp_forum_post} node_data_field_parent_node ON node.vid = node_data_field_parent_node.vid
       INNER JOIN {users} users ON node.uid = users.uid
       WHERE (node.type in ('rp_forum_post')) AND (term_node.tid = %d) AND node.status = 1
         ORDER BY node_created DESC
         LIMIT 1  
  ";
  $res = db_query($query, $tid);
  $cur = db_fetch_array($res);

  $rtn = array();
  if ($cur["nid"] != "") {
    $rtn["nid"] = $cur["nid"];
    $rtn["title"] = $cur["node_title"];
    $rtn["created"] = $cur["node_created"];
    $rtn["user_name"] = $cur["users_name"];
    $rtn["uid"] = $cur["users_uid"];
    $rtn["parent_node"] = $cur["node_data_field_parent_node_field_parent_node_value"];
    $rtn["anon_name"] = $cur["node_data_field_parent_node_field_anon_name_value"];
    
    $user_obj = new stdClass();
    $user_obj->uid = $rtn["uid"];
    $user_obj->name = $rtn["user_name"];
    $user_link = theme("username", $user_obj);
    
    if ($user_obj->uid == 0 && $rtn["anon_name"] != "") {
      //$user_obj->name = $rtn["anon_name"];
      $user_link = $rtn["anon_name"]; 
    }

    $pn = $rtn["parent_node"];
    if ($pn == "-1") $pn = $rtn["nid"];
    

    $img_path = $GLOBALS["base_url"] . "/" . drupal_get_path("module", "rpforum") . "/style/images/";

    $msg = "";
    
    $by = t("by");
    $in = t("in");
    
    //$msg .= "<div class='rpforum-message-last-on'>" . l("<img src='$img_path/last_post.gif'>", "$menu_base/$tid/$pn", array("html"=>true, "query"=>"goto=" . $rtn["nid"])) . " " . rpforum_format_date($rtn["created"]) . "</div>";
    //$msg .= "<div class='rpforum-message-last-on'>" . l("&nbsp;", "$menu_base/$tid/$pn", array("html"=>true, "query"=>"goto=" . $rtn["nid"])) . " " . rpforum_format_date($rtn["created"]) . "</div>";
    $msg .= "<div class='rpforum-message-last-on'>" . l("&nbsp;", "$menu_base", array("html"=>true, "query"=>"find=" . $rtn["nid"])) . " " . rpforum_format_date($rtn["created"]) . "</div>";
    $msg .= "<div class='rpforum-message-last-by'>$by $user_link</div>";
    $msg .= "<div class='rpforum-message-last-in'>$in " . l($rtn["title"], "$menu_base/$tid/$pn", array("query"=>"goto=" . $rtn["nid"])) . "</div>";
    
    $rtn["message"] = $msg;

    // create a similar message free of HTML...
    $msg = "";
    $msg .= "<div class='rpforum-message-last-on'>&nbsp; " . rpforum_format_date($rtn["created"]) . "</div>";
    $msg .= "<div class='rpforum-message-last-by'>$by $user_link</div>";
    $msg .= "<div class='rpforum-message-last-in'>$in " . $rtn["title"] . "</div>";
    
    
    $rtn["no_links_message"] = "<span class='no-links-message'>$msg</span>";
    
  }
  
  return $rtn;
}

/**
 * Displays a container by itself, with its forums and such underneath.
 *
 * @param int $tid
 */
function rpforum_display_container($tid = NULL) {
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  $vid = variable_get('rpforum_nav_vocabulary', '');  
  $container = taxonomy_get_term($tid);
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");
  $rtn = "";
  
  // Find out the title of the tid!
  $term = taxonomy_get_term($tid);
  drupal_set_title($term->name);

  $rtn .= rpforum_render_search_and_login();
  if (variable_get("rpforum_enable_search_field", 1) == "1") {
    $extra_style = "rpforum-search-enabled";
  }  
  
  
  $rtn .= "<div class='rpforum-page-container rpforum-page-container-$tid rpforum-style-default $extra_style'>";

  // Is there any "at top" HTML we need to display?
  $at_top = variable_get("rpforum_at_top_$tid", "");
  if ($at_top != "") {
    // There is!  Display it.
    $rtn .= "<div class='rpforum-at-top rpforum-at-top-$tid'>$at_top</div>";
  }  
  
  // Now, look for children of these tid's!
  $rtnC = "";
  $container_is_empty = TRUE;
  $rtnC .= "<table class='container-forums container-forums-$tid'>
            <tr>                
              <th class='rp-th-name' colspan='2'>$container->name</th>
              <th class='forum-topics'>" . t("Topics") . "</th>
              <th class='forum-posts'>" . t("Posts") . "</th>
              <th class='rp-th-last-post'>" . t("Last post") . "</th>
            </tr>";
  
  if (trim($container->description) != "") {
    $rtnC .= "<tr>
              <td colspan='10'>
                <div class='rpforum-container-description'>$container->description</div>
              </td>
              </tr>";
  }
  
  $children = taxonomy_get_children($tid);
  $pol = "odd";
  foreach($children as $ctid => $forum) {
        
    $forum_row = rpforum_render_forum_row($forum, $pol, $menu_base, true);
    
    if ($forum_row) {
      $rtnC .= $forum_row;
      $container_is_empty = FALSE;  
    }
    
    $pol = ($pol == "odd") ? "even" : "odd"; 
  }
  $rtnC .= "</table>";
  
  
  if (!$container_is_empty) {
    $rtn .= "<div class='rpforum-container'>";
    $rtn .= $rtnC;
    $rtn .= "</div>";
  }  
  
  
  $rtn .= "</div>"; 
  
  
  return $rtn;
}


function rpforum_display_topics($tid = NULL)
{
  // Displays the topics in a forum (from the view)
  $rtn = "";
  
  // If this tid is actually a container, then call the rpforum_display_container function
  // instead.
  $containers = variable_get('rpforum_containers', array());
  if (in_array($tid, $containers)) {
    return rpforum_display_container($tid);
  }
  
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");  
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");

  $rtn .= rpforum_render_search_and_login();
  if (variable_get("rpforum_enable_search_field", 1) == "1") {
    $extra_style = "rpforum-search-enabled";
  }
  
  // Find out the title of the tid!
  $term = taxonomy_get_term($tid);
  if (!$term) {
    // Meaning, this topic could not be found!
    // Send them a friendly error message.
    $rtn .= "<b>" . t("Error - Forum not found") . "</b>
              <br><br>
              " . t("Sorry, but the forum you are visiting does not exist.  Either it has been
             deleted, or you have reached this page in error.") . "
             <br><br>
             " . t("If you believe you have reached this page in error, please contact 
             the forum administrator.");
    drupal_set_title("Forum not found");
    return $rtn;
  }
  // Get the vocab id...
  $vid = variable_get("rpforum_nav_vocabulary", "");
    
  drupal_set_title($term->name);
  
  $rtn .= "<div class='rpforum-page-topic rpforum-style-default $extra_style'>";

  $view = views_get_view("rp_forum_view_topics");
  $view->execute_display("default", array($tid));

  // Is there any "at top" HTML we need to display?
  $at_top = variable_get("rpforum_at_top_$tid", "");
  if ($at_top != "") {
    // There is!  Display it.
    $rtn .= "<div class='rpforum-at-top rpforum-at-top-$tid'>$at_top</div>";
  }
  
  
  // Does this forum have subforums?
  $subforums = taxonomy_get_children($tid);
  if (count($subforums) > 0) {
    // Yes, it does!  Let's display them at the top in a pleasing table.
    $rtn .= "<div class='rpforum-container rpforum-subforum-container'>";
    $rtn .= "<table class='container-subforums container-subforums-$tid'>
                <tr>                
                  <th class='rp-th-name' colspan='2'>Subforums</th>
                  <th class='forum-topics'>" . t("Topics") . "</th>
                  <th class='forum-posts'>" . t("Posts") . "</th>
                  <th class='rp-th-last-post'>" . t("Last post") . "</th>
                </tr>";    
    $pol = "odd";
    foreach($subforums as $sftid => $subforum) {
      $rtn .= rpforum_render_forum_row($subforum, $pol, $menu_base, false);
      $pol = ($pol == "odd") ? "even" : "odd"; 
    }    
    
    $rtn .= "</table>";
    $rtn .= "</div>";
  }
  
  
  $rtn .= "<div class='rpforum-container'>";

  // Display the pager at the top of the screen?
  if (variable_get("rpforum_display_pager_at_top", "1") == "1") {
    $top_pager = theme("pager", array(), $view->pager["itmes_per_page"], $view->pager["element"]);
    if ($top_pager) {
      $rtn .= "<div class='rpforum-pager-top'>$top_pager</div>";
    }
  }

  $rtn .= $view->display["default"]->handler->output;
  $rtn .= "</div>";
  
  $message_icon_path = $GLOBALS["base_url"] . "/" . drupal_get_path("module", "rpforum") . "/icons/default";
  
  // We need to use str_replace to place in values for the "~~replies_nid, ~~views_nid, and ~~lastpost_nid".
  foreach($view->result as $res) {
    
    $bool_has_new = false;
    
    
    // Create the user_link.
    $user_obj = new stdClass();
    $user_obj->uid = $res->users_uid;
    $user_obj->name = $res->users_name;
    $anon_name = $res->node_data_field_parent_node_field_anon_name_value;    
    
    $user_link = theme("username", $user_obj);
    if ($user_obj->uid == 0 && $anon_name != "") {
      $user_link = $anon_name; 
    }

    $rtn = str_replace("~~started_$res->nid", $user_link, $rtn);
       
    
    // Also, handle the icon.
    $icon_type = "topic-default";
    $icon_title = "";
    $unread_count = rpforum_get_unread_topic_count($res->nid);
    if ($unread_count > 0) {
      $icon_type = "topic-new";
      $icon_title = t("new posts");
      $bool_has_new = true;
    }
    
    $replies_count = rpforum_get_replies_to_post_count($res->nid, true);
    // Is this topic hot/hot-new?
    $hot_count = variable_get("rpforum_hot_count", 25);
    if ($replies_count >= $hot_count) {
      if ($icon_type == "topic-default") {
        $icon_type = "topic-hot";
        $icon_title = t("hot!");
      }
      else if ($icon_type == "topic-new") {
        $icon_type = "topic-hot-new";
        $icon_title = t("hot! new posts!");
      }
    }    
    
    
    if ($res->node_sticky == "1") {
      $icon_type = "topic-sticky";
      $icon_title = t("sticky");
    }

    // Is the topic locked (closed)?
    $details = rpforum_get_post_details($res->nid);
    if ($details["locked"] == "1") {
      $icon_type = "topic-closed";
      $icon_title = t("topic is closed, posting is no longer allowed");
    }
    
    $rtn = str_replace("~~icon_$res->nid", "<div class='topic-icon $icon_type' title='$icon_title'>&nbsp;</div>", $rtn);
    
    
    if ($bool_has_new) {
      $replies_count .= "<div class='new-notice'>" . t("new!") . "</div>";
    }
    $rtn = str_replace("~~replies_$res->nid", $replies_count, $rtn);

    $rtn = str_replace("~~views_$res->nid", rpforum_get_topic_views($res->nid), $rtn);
    $rtn = str_replace("~~lastpost_$res->nid", rpforum_get_last_post_in_topic($res, $tid, $replies_count), $rtn);

    $rtn = str_replace("~~message_icon_path", $message_icon_path, $rtn);
    
  }
  
  
  $rtn .= "<div class='rpforum-new-topic-link'>
          " . l(t("New Topic"), "node/add/rp-forum-post", array("query"=>"nid=-1&tid=$tid&token=" . rpforum_get_token("-1$tid"))) . "</div>";
  
  $rtn .= "</div>";
  
  // replace __menu_base__ with the menu_base variable.
  $rtn = str_replace("__menu_base__", $menu_base, $rtn);
  
  return $rtn;
}

function rpforum_get_unread_topic_count($nid = NULL) {
  // Return the count of unread items for this user in this topic.
  global $user;
   
  if ($user->uid == 0) return 0;  // anonymous.
  
  // Begin by getting a count of how many replies are in this topic, +1 (for
  // the start of the topic itself.
  $total = rpforum_get_replies_to_post_count($nid) + 1;
  
  // Now, query our table to find out how many posts the user has read
  // in this topic.
  $count = 0;
  // Firstly, did the user read the starting topic?
  $temp = db_result(db_query("SELECT cid FROM {rpforum_user_has_read}
                              WHERE nid = %d
                              AND uid = %d
                              AND status = 'read' ", $nid, $user->uid));
  if ($temp != "") {
    $count++;
  }
 
  // Next, how many has he read which have this nid as their parent_node?
  $count += db_result(db_query("SELECT COUNT(cid) FROM {rpforum_user_has_read}
                              WHERE parent_node = %d
                              AND uid = %d
                              AND status = 'read' ", $nid, $user->uid));
    
  // Now, return the difference between count and total to get the unread count.
  return ($total - $count);
  
}


function rpforum_display_posts($tid = NULL, $nid = NULL)
{
  // This will display posts in a topic.  It uses a view
  // to show us, in order of post date, the posts under this
  // tid and nid (including the nid)
  $rtn = "";
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  // Get the vocab id...
  $temp = taxonomy_get_parents($tid);
  $v = reset($temp);
  $vid = $v->vid;
  
  // What page of the view (if any) are we on?
  $page = $_REQUEST["page"];
  drupal_add_js('misc/collapse.js');  // used for later, so we can have collapsible fieldsets
  
  // First things first:  is there a &goto= in the GET?  If so, we are going to figure
  // out what page that is on and do a drupal_goto(url#nid) to send the user there.
  if (trim($_REQUEST["goto"]) != "" && trim($_REQUEST["goto"]) != $nid) {
    $goto_nid = trim($_REQUEST["goto"]);
    
    // Execute our display which gives us all results.
    $temp_view = views_get_view("rp_forum_view_posts");
    $temp_view->execute_display("attachment_2", array($nid));

    $items_per_page = $temp_view->display["default"]->display_options["items_per_page"];
    // Now, see if we can find the nid in question amoung the results.
    $t = -1;
    
    foreach ($temp_view->result as $c => $res) {
      if ($res->nid == $goto_nid) {
        $t = $c;
        break;
      }
    }
    
    if ($t > -1) {
      // Meaning, yes, we did find the nid amoung our results!
      // So from here, we can go ahead and drupal_goto to the correct
      // page.
      $goto_page = floor($t/$items_per_page);
      drupal_goto("$menu_base/$tid/$nid", "page=$goto_page", $goto_nid);
      return;
    }
      
    
  }
  
  
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");
  
  if (variable_get("rpforum_enable_search_field", 1) == "1") {
    $extra_style = "rpforum-search-enabled";
  }

  $starting_node = node_load($nid);

  drupal_set_title($starting_node->title);

  $rtn .= "<div class='rpforum-page-post rpforum-style-default $extra_style'>";
  
  
  //$rtn .= "<div class='reply-link'>";
  //$rtn .= l("Post reply", "node/add/rp-forum-post", array("query"=>"nid=$nid&tid=$tid"));
  //$rtn .= "</div>";
  
  $rtn .= "<table border='0' cellpadding='0' cellspacing='0'>
            ";
  
  // Let's make the topic controls links
  // this should only appear by permission.
  $details = rpforum_get_post_details($nid);
  //if (user_access("administer rpforums")) {
  if (rpforum_access_moderate_forum($tid)) {
    $rtn .= "<td align='right' valign='bottom' class='rpforum-moderation-controls'>";
    
    $rtn .= drupal_get_form("rpforum_forum_moderation_form", $starting_node, $details, $tid);
    
    $rtn .= "</td>";
  }
  
  $search_and_login = rpforum_render_search_and_login();
  if ($search_and_login != "") {
    $rtn .= "<td valign='bottom'>$search_and_login</td>"; 
  }
  $rtn .= "</table>";

  // Now, display any replies (using our clever view)...
  $view = views_get_view("rp_forum_view_posts");
  $view->execute_display("default", array($nid));

  // If this is locked, let the user know.
  if ($details["locked"] == "1") {
    $rtn .= "<div class='rpforum-locked-message'>" . t("This topic has been <strong>locked</strong> by an administrator.
                As such, new posts, replies, and edits are no longer allowed.") . "</div>";
  }
  
  if ($starting_node->sticky == "1") {
    $rtn .= "<div class='rpforum-locked-message'>" . t("This topic is set as <strong>sticky</strong>.") . "</div>";
  }

  
  $rtn .= "<div class='rpforum-container'>";
  
  // Display the pager at the top of the screen?
  if (variable_get("rpforum_display_pager_at_top", "1") == "1") {
    $top_pager = theme("pager", array(), $view->pager["itmes_per_page"], $view->pager["element"]);
    if ($top_pager) {
      $rtn .= "<div class='rpforum-pager-top'>$top_pager</div>";
    }
  }
  
  // Display the parent post...
  // Don't do this if we are on a new page!
  if ($page == "" || $page < 1) {
    $starting_node->force_zebra = "even"; // force first post to be "even" (0th post)
    $rtn.= "<div class='rpforum-parent-post'>" . node_view($starting_node, false, true, false) . "</div>";
  }  
  

  // Display the view's output.  
  $rtn .= $view->display["default"]->handler->output;


  $rtn .= "</div>";
  
  if ($details["locked"] != "1" || user_access("administer rp forum")) {
    $rtn .= "<div class='reply-link'>";
    $rtn .= l(t("Post reply"), "node/add/rp-forum-post", array("query"=>"nid=$nid&tid=$tid&token=" . rpforum_get_token($nid . $tid)));
    $rtn .= "</div>";
  }
  
  $rtn .= "</div>";
  
  // We want to update the "topic_views" counter for this parent_node.
  rpforum_increment_topic_views($nid);
  
  // We also want to mark everything in this topic as having been read by
  // the user.
  rpforum_set_user_has_read($nid, -1);
  foreach($view->result as $res) {
    rpforum_set_user_has_read($res->nid, $nid);
  }
  
  // Breadcrumbs
  $bread = drupal_get_breadcrumb();
  $term = taxonomy_get_term($tid);
  $bread[] = l($term->name, "$menu_base/$tid");
  // Set Breadcrumbs
  drupal_set_breadcrumb($bread); 
  
  return $rtn;
}

/**
 * This function simply provides a pulldown with various forum moderation options
 * to the user, based on the current conditions of the topic.
 *
 */
function rpforum_forum_moderation_form($form_state, $starting_node, $details, $tid) {
  $form = array();
  
  //if (user_access("administer rpforums")) {
  if (rpforum_access_moderate_forum($tid)) {
      
    $menu_base = variable_get("rpforum_menu_base", "rpforum");  
    
    $nid = $starting_node->nid;
    
    $options = array();
    $options["none"] = "-----";
    
    $options["remove_topic"] = t("Remove topic");
    
    if ($starting_node->sticky == "1") {
      $options["make_unsticky"] = t("Make topic unsticky");
    }
    else {
      $options["make_sticky"] = t("Make topic sticky");
    }
    
    if ($details["locked"] == "1") {
      $options["unlock_topic"] = t("Unlock topic");
    }
    else {
      $options["lock_topic"] = t("Lock topic");
    }
    
    $options["move_topic"] = t("Move topic");
    
    $form["rpforum_moderation_action"] = array(
      "#title" => t("Action"),
      "#type" => "select",
      "#options" => $options,      
    );
    
    $form["nid"] = array(
      "#type" => "hidden",
      "#value" => $nid,
    );

    $form["tid"] = array(
      "#type" => "hidden",
      "#value" => $tid,
    );
    
    $form["menu_base"] = array(
      "#type" => "hidden",
      "#value" => $menu_base,
    );
    
    
    $form["submit"] = array(
      "#type" => "submit",
      "#value" => ">",
    );
    
}  
  
  
  return $form;
}

/**
 * All we really want to do in this submit handler is redirect the user to
 * whatever url they need to go to.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function rpforum_forum_moderation_form_submit($form, $form_state) {
  
  $action = $form_state["values"]["rpforum_moderation_action"];
  $menu_base = $form_state["values"]["menu_base"];
  $nid = $form_state["values"]["nid"];
  $tid = $form_state["values"]["tid"];
  
  //$remove_topic_link = l("Remove topic", "node/$nid/delete", array("query"=>"nid=-1&tid=$tid&type=topic"));
  //$make_sticky_link = l("Make topic sticky", "$menu_base/sticky/$nid/1");
  //$make_unsticky_link = l("Make topic unsticky", "$menu_base/sticky/$nid/0");
  //$make_locked_link = l("Lock topic", "$menu_base/lock/$nid/1");
  //$make_unlocked_link = l("Unlock topic", "$menu_base/lock/$nid/0");  
  
  if ($action == "remove_topic") {
    drupal_goto("node/$nid/delete", "nid=-1&tid=$tid&type=topic");
  }
  
  if ($action == "make_unsticky") {
    drupal_goto("$menu_base/sticky/$nid/0");
  }
  
  if ($action == "make_sticky") {
    drupal_goto("$menu_base/sticky/$nid/1");
  }
  
  if ($action == "unlock_topic") {
    drupal_goto("$menu_base/lock/$nid/0");
  }
  
  if ($action == "lock_topic") {
    drupal_goto("$menu_base/lock/$nid/1");
  }
  
  if ($action == "move_topic") {
    drupal_goto("$menu_base/move/$nid");
  }
  
}


function rpforum_set_user_has_read($nid, $parent_node) {
  // If the user has not already read this node, then update the
  // table to say they have.
  global $user;
  
  if ($user->uid == 0) return;  // anonymous
  
  // TODO:  We might can optimize this by storing in the session what
  // the user has already read.
  
  $res = db_result(db_query("SELECT cid FROM {rpforum_user_has_read}
                              WHERE nid = %d
                              AND parent_node = %d
                              AND uid = %d
                              AND status = 'read' ", $nid, $parent_node, $user->uid));
  if ($res == "") {
    // Was not already there.  update/Insert it.
    
    db_query("UPDATE {rpforum_user_has_read}
              SET status = 'read'
              WHERE nid = %d
              AND parent_node = %d
              AND uid = %d", $nid, $parent_node, $user->uid);    
    if (db_affected_rows() == 0) {
      db_query("INSERT INTO {rpforum_user_has_read}
              (nid, parent_node, uid, status)
              VALUES (%d, %d, %d, 'read') ", $nid, $parent_node, $user->uid);
    }
    
  } 
  
}


function rpforum_get_topic_views($nid = NULL) {
  return db_result(db_query("SELECT count FROM {rpforum_topic_views}
                            WHERE nid = %d", $nid));
}



function rpforum_increment_topic_views($nid = NULL) {
  // This function will check the rpforum_topic_views table
  // and increment its value for the supplied nid.
  global $user;
  
  // TODO:  If the user is logged in, and has already viewed this topic,
  // then do not increment again!
  
  db_query("UPDATE {rpforum_topic_views}
            SET count = count + 1
            WHERE nid = %d", $nid);
  if (db_affected_rows() == 0) {
    // The row did not exist yet, so insert it.
    db_query("INSERT INTO {rpforum_topic_views} (nid, count)
              VALUES (%d, 1) ", $nid);
  }
   
}


function rpforum_convert_bbcode_to_html($str) {
  //return $str;
    
  $Text = $str;
  
  $URLSearchString = " a-zA-Z0-9\:\/\-\?\&\.\=\_\~\#\'";
	// Set up the parameters for a MAIL search string
	$MAILSearchString = $URLSearchString . " a-zA-Z0-9\.@";

	// Perform URL Search
	$Text = preg_replace("/\[url\]([$URLSearchString]*)\[\/url\]/", '<a href="$1" target="_blank">$1</a>', $Text);
	// with quote's
	$Text = preg_replace("(\[url\=\"([$URLSearchString]*)\"\](.+?)\[/url\])", '<a href="$1" target="_blank">$2</a>', $Text);
  // no quote
	$Text = preg_replace("(\[url\=([$URLSearchString]*)\](.+?)\[/url\])", '<a href="$1" target="_blank">$2</a>', $Text);
	
	//$Text = preg_replace("(\[url\=([$URLSearchString]*)\]([$URLSearchString]*)\[/url\])", '<a href="$1" target="_blank">$2</a>', $Text);

	// Check for bold text
	$Text = str_replace("[b]", "<b>", $Text);
	$Text = str_replace("[/b]", "</b>", $Text);
	
	// Check for Italics text
	$Text = str_replace("[i]", "<i>", $Text);
	$Text = str_replace("[/i]", "</i>", $Text);
	
	// Check for Underline text
	$Text = str_replace("[u]", "<u>", $Text);
	$Text = str_replace("[/u]", "</u>", $Text);

	// Check for strike-through text
	$Text = str_replace("[s]", "<span style='text-decoration:line-through;'>", $Text);
	$Text = str_replace("[/s]", "</span>", $Text);
	
	
	// Check for colored text
	//$Text = preg_replace("(\[color=(.+?)\](.+?)\[\/color\])is","<span style=\"color: $1\">$2</span>",$Text);
	$Text = preg_replace("(\[color=(.+?)\])is","<span style=\"color: $1\">",$Text);
  $Text = str_replace("[/color]", "</span>", $Text);
	
	// Check for sized text
	//$Text = preg_replace("(\[size=(.+?)\](.+?)\[\/size\])is","<span style=\"font-size: $1\">$2</span>",$Text);
	$Text = preg_replace("(\[size=(.+?)\])is","<span style=\"font-size: $1\">",$Text);
  
	$Text = str_replace("[/size]", "</span>", $Text);
	
  // opening quote...
	$quote_replace = "<blockquote class='rpforum-quote'><div class='rpforum-start-quote'>" . t("Quote") . ":</div><div class='rpforum-quote-body'><p> ";
	$quote_with_name_replace = "<blockquote class='rpforum-quote'><div class='rpforum-start-quote'>" . t("Quote from") . " $1</div><div class='rpforum-quote-body'><p> ";

	// Place a \n before each quote, so as to fix a nested quote bug.
	$Text = str_replace("[quote", " \n[quote", $Text);
	
	// Fix empty quote names. Ex:  [quote=""]
	$Text = str_replace('[quote=""]', '[quote]', $Text);
	// Basic [quote] block.
	$Text = str_replace("[quote]", $quote_replace, $Text);
		
	//[quote="Bob"] style (with quotes around name)	
	$Text = preg_replace("(\[quote\=\"(.*)\"\])", $quote_with_name_replace, $Text);

	// [quote=Richard] style... 
	$Text = preg_replace("(\[quote\=(.*)\])", $quote_with_name_replace, $Text);
	
	// In case it contains extra author information not already converted...
	$Text = preg_replace("/\[quote.*\]/", $quote_replace, $Text);
	
	// closing quote...
	$Text = str_replace("[/quote]", "</p></div></blockquote>", $Text);
	
	
	// Images
	$Text = preg_replace("/\[img\](.+?)\[\/img\]/", '<img src="$1">', $Text);

	// [img=widthxheight]image source[/img]
	// Image, only width specified
	$Text = preg_replace("/\[img\=([0-9]*)\](.+?)\[\/img\]/", '<img src="$2" width="$1">', $Text);
	// Image, width and height specified
	$Text = preg_replace("/\[img\=([0-9]*)x([0-9]*)\](.+?)\[\/img\]/", '<img src="$3" height="$2" width="$1">', $Text);

	return $Text;
}

function rpforum_convert_smileys_to_html($str) {

  $smiley_array = rpforum_get_smiley_array();
  $smiley_path = $GLOBALS["base_url"] . "/" . drupal_get_path("module", "rpforum") . "/smileys/default";
  
  foreach ($smiley_array as $code => $file) {
    $code = htmlentities($code);
    if ($code == ":-\\\\") $code = ":-\\";
    $str = str_replace("$code", " <img src='$smiley_path/$file'>", $str);
  }
  
  return $str;
  
}


function rpforum_get_token($value = "") {
  // Returns a token.  Very similar to drupal's drupal_get_token, except we do not
  // want to tie this to the session_id, since we might be dealing with a user who is trying
  // to log in as they are entering a new post.
  $private_key = drupal_get_private_key();
  return md5($value . $private_key);
}

function rpforum_valid_token($token, $value = "") {
  
  $test_against =  md5($value . variable_get('drupal_private_key', ''));

  return ($token == $test_against);
}



function rpforum_after_build_add_js($element) {
  
  $quote = check_plain($_REQUEST["quote"]);
    
  // Only do this if it is the first time coming to this page. Not preview,
  // and not form error!  Basically, if op equals anything at all, then
  // it means we have been through this once before.
  if (!isset($_REQUEST["op"])) {
    drupal_add_js(array("rpforumQuote" => $quote), "setting");
  }
  else {
    drupal_add_js(array("rpforumQuote" => ""), "setting");
  }
  
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");    
  drupal_add_js(drupal_get_path("module", "rpforum") . "/js/rpforum.js");  
  
  
  return $element;
}



function rpforum_form_alter(&$form, $form_state, $form_id)
{
  global $user;
    
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  
  // Make it so we can edit rp forum post content
  // from the admin/content page.
  // Special thanks to MaxMendez for this!  
  if($form_id=='node_admin_content'){
    if (is_array($form['admin']['operations'])) {
      foreach(array_keys($form['admin']['operations']) as $key){
        $str_nids .= $key . ",";
      }
    }
    $str_nids.= '-1';
    $rs = db_query("SELECT nid FROM {node} WHERE type = 'rp_forum_post' AND nid in (%s)",$str_nids);
    while($row = db_fetch_object($rs)){
      $nids[] = $row->nid;
    }
    if (is_array($nids) && count($nids) > 0) {
      foreach($nids as $nid){
        $node = node_load(array('nid'=>$nid));
        $term = array_pop($node->taxonomy);
        $form['admin']['operations'][$nid]['#value'] = l(t("edit"), "node/$node->nid/edit", array("query"=>"nid=" . $node->field_parent_node[0]['value'] . "&tid=".$term->tid."&token=" . rpforum_get_token($node->field_parent_node[0]['value'] . $term->tid)));
      }
    }
  }     
  
  
  if ($form_id == "user_login_block") {
    $nid = check_plain($_REQUEST["nid"]);
    $tid = check_plain($_REQUEST["tid"]);
    $token = check_plain($_REQUEST["token"]);
    
    // Put those values in as elements.
    $form["fromuser_tid"] = array(
      "#type" => "hidden",
      "#value" => $tid,
    );
    $form["fromuser_token"] = array(
      "#type" => "hidden",
      "#value" => $token,
    );
    $form["fromuser_nid"] = array(
      "#type" => "hidden",
      "#value" => $nid,
    );
    
    
  }
  
  
  if ($form_id == "user_register") {
    $form["#validate"][] = "rpforum_user_register_validate";
  }
  
  
  if ($form_id == "rp_forum_post_node_form") {

    // In order to handle quoted text, we need to attach some
    // javascript in an after_build function (to make sure
    // it gets called every time)
    $form["title"]["#after_build"] = array("rpforum_after_build_add_js");
    
    
    $nid = check_plain($_REQUEST["nid"]);
    $tid = check_plain($_REQUEST["tid"]);
    $token = check_plain($_REQUEST["token"]);
    $vid = variable_get("rpforum_nav_vocabulary", "");  //vocab id of the tid.
    
    if ($tid == "") { 
      // The user might be trying to log in!  As such, our values are now
      // in these variables.
      $nid = check_plain($_REQUEST["fromuser_nid"]);
      $tid = check_plain($_REQUEST["fromuser_tid"]);
      $token = check_plain($_REQUEST["fromuser_token"]);      
    }
    
    
    if ($nid == "") {$nid = -1;}
    // TODO: confirm this nid actually exists.
    if ($nid > 0) {
      $node = node_load($nid);
    } else {
      $node = new stdClass();
    }
    
    if ($tid == "") {
 
      drupal_set_message(t("Sorry, you must create a new post by first
                          navigating to a topic in the forum."));
      drupal_goto("<front>");
      return;
    }
    
    // Check to make sure topic is not locked.
    if ($nid > -1) {
      $details = rpforum_get_post_details($nid);
      if ($details["locked"] == "1" && !user_access("administer rp forum")) {
        drupal_set_message(t("Sorry, the topic you are attempting to post into
                            has been locked by an administrator."));
        drupal_goto("<front>");
        return;      
      }
    }
    
    
    drupal_set_title(t("Post new"));

    if ($node->title != "" && $form["title"]["#default_value"] == "") {
      $form["title"]["#default_value"] = t("Re:") . " " . $node->title;
    }
    
    // Add a new hidden fields which we will use to set important ones later.
    $form["hidden_parent_node"] = array(
      "#type" => "hidden",
      "#value" => $nid,
    );    

    $form["hidden_taxonomy"] = array(
      "#type" => "hidden",
      "#value" => $tid,
    );    
    
    $form["hidden_token"] = array(
      "#type" => "hidden",
      "#value" => $token,
    );    
    
    
    
    // let's hide the taxonomy selector.
    $form["taxonomy"][$vid]["#prefix"] = "<div class='hide-me'>";
    $form["taxonomy"][$vid]["#suffix"] = "</div>";
    
    
    $form["#validate"][] = "rpforum_forum_post_validate";
    $form["#redirect"] = "$menu_base/$tid/$nid";

    // Move the submit/preview buttons.
    $temp = $form["buttons"];
    unset($form["buttons"]);
    $form["buttons2"] = $temp;
    
    // Remove the delete button.
    unset($form["buttons2"]["delete"]);
    
    
    
    
    
    
    // Only do this if we are adding a new node, NOT editing!

    if ($form["nid"]["#value"] == NULL) {
      if ($nid != -1) {
        // Add previous posts as markup at the bottom.
        $form["markup_prev_posts"] = array(
          "#value" => rpforum_render_reply_previous_posts($nid),        
        );      
      }
      
      $user_profile = rpforum_build_user_profile($user->uid);
      
      if ($user->uid > 0 ) {
        // Add a "subscribe" checkbox.
        
        // First, make sure they are not already subscribed to this topic.
        $subscriptions = rpforum_get_user_subscriptions($user->uid);

        if (in_array($nid, $subscriptions)) {
          $form["subscribe"] = array(
            "#value" => "<div>" . t("<b>Subscription: </b>You are currently subscribed to this topic, and will
                        receive emails when posts are made.  Visit your ") . "
                        " . l(t("Profile Settings"), "user/$user->uid/edit-profile") . t(" page
                        to un-subscribe.") . "</div>",
            "#weight" => 0,
          );
        }
        else {
          // Not subscribed yet.        
          $form["subscribe"] = array(
            "#type" => "checkbox",
            "#title" => t("Subscribe to this topic."),
            "#description" => t("Check this box if you would like to receive email
                              updates when posts are made to this topic. (You can
                              always un-subscribe later on your Profile Settings page.)"),
            "#weight" => 0,
            "#default_value" => $user_profile["auto_subscribe"],
          );
          }     
        }
      
    }
    
    // Let's try to hide those ugly fieldsets.
    $form["comment_settings"]["#attributes"] = array("class" => "hide-me");
    $form["options"]["#attributes"] = array("class" => "hide-me");
    $form["revision_information"]["#attributes"] = array("class" => "hide-me");
    $form["menu"]["#attributes"] = array("class" => "hide-me");
    
    // If this is NOT an anonymous user, then we do not want to
    // display the anonymous info boxes.
    if ($user->uid > 0)
    {
      unset($form["field_anon_name"]);
    }
    
    //$form["body_field"]["body"]["#rows"] = 10;
    // Remove the split summary button.
    //$form['body_field']['teaser_include']['#access'] = FALSE;
    
    if (variable_get("rpforum_use_bbcode", 1) != 0) {
      // Let's add the BBCode buttons above the Body field.
      $form["field_body2"][0]["#title"] = "";
      $form["field_body2"][0]["#prefix"] = rpforum_render_bbcode_buttons();
    }
    
    
    // Message icon stuff
    // We want to show the message icon to the side of the select list.
    
    // Let's set up the breadcrumbs
    $rpforum_title = variable_get("rpforum_title", "RP Forum");
    
    $bread = array();
    $bread[] = l(t("Home"), "<front>");
    $bread[] = l($rpforum_title, "$menu_base");
    $term = taxonomy_get_term($tid);
    $bread[] = l($term->name, "$menu_base/$tid");
    if ($nid != -1) {
      $bread[] = l($node->title, "$menu_base/$tid/$nid");   
    }    
    drupal_set_breadcrumb($bread);
    
  }
  
  
  // Deleting a post...
  if ($form_id == "node_delete_confirm") {
    drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");    
    
    $type = check_plain($_REQUEST["type"]);    
    $parent_node = check_plain($_REQUEST["nid"]);
    $tid = check_plain($_REQUEST["tid"]);
    $vid = variable_get("rpforum_nav_vocabulary", "");  //vocab id of the tid.
        
    if ($type == "post") {
      
      $node = node_load($form["nid"]["#value"]);
      $form["description"]["#value"] = "
          <div class='rpforum-confirm-delete'>" . node_view($node, true) . "</div>
          " . t("Are you sure you wish to delete
            this post?  This action cannot be undone!");
     
      $form["actions"]["cancel"]["#value"] = "<a href='javascript: history.go(-1);'>" . t("Cancel") . "</a>";
      $form["#redirect"] = "$menu_base/$tid/$parent_node";
    }    
    
    if ($type == "topic") {
      $node = node_load($form["nid"]["#value"]);
      
      drupal_set_title(t("Are you sure you want to remove the topic <em>@node_title</em>, and all posts under it?", array("@node_title" => $node->title)));
      
      $form["description"]["#value"] = "
          <div class='rpforum-confirm-delete'>" . node_view($node, true) . "</div>
          " . t("Are you sure you wish to remove this topic, <strong>and all the posts under it</strong>?
          This action cannot be undone!");
     
      $form["actions"]["cancel"]["#value"] = "<a href='javascript: history.go(-1);'>" . t("Cancel") . "</a>";
      $form["#redirect"] = "$menu_base/$tid";
      
      // We need to add an extra submit handler to also remove all the nodes
      // for which this node was a parent.
      $form["#submit"][] = "rpforum_delete_topic_submit";
      
    }
     
  }  
}


function rpforum_ip_is_banned($ip = "") {
  // Check to see if the supplied IP is banned or not.
  if ($ip == "") {
    $ip = $_SERVER['REMOTE_ADDR'];
  }
  
  $ban_list = variable_get("rpforum_ban_list", "");
  $ban_array = explode("\n", trim($ban_list));
  
  foreach($ban_array as $ban_line) {
    $ban_line = trim($ban_line);
    if ($ban_line == "") continue;
    
    $ban_ip = $ban_line;
    $is_wildcard = false;
    
    // Firstly, check for comments (#) or //
    if (strstr($ban_ip, "#")) {
      $temp = explode("#", $ban_ip);
      $ban_ip = trim($temp[0]);
    }
    if (strstr($ban_ip, "//")) {
      $temp = explode("//", $ban_ip);
      $ban_ip = trim($temp[0]);
    }
    
    // Now, check for wildcards...
    if (strstr($ban_ip, "*")) {
      $temp = explode("*", $ban_ip);
      $ban_ip = trim($temp[0]);
      $is_wildcard = true;
    }
    
    // Now, test the $ip against the $ban_ip.
    if (!$is_wildcard) {
      if ($ban_ip == $ip) {
        return true;
      }
    }
    else {
      // using a wildcard!
      if (substr($ip, 0, strlen($ban_ip)) == $ban_ip) {
        return true;
      }
    }
    
    
  }
  
  return false;
  
}

function rpforum_forum_post_validate($form, &$form_state) {
  
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");
  
  // First things first:  is this user's IP banned from making posts?
  if (rpforum_ip_is_banned()) {
    $bad_ip = $_SERVER['REMOTE_ADDR'];
    form_error($form["hidden_token"], variable_get("rpforum_ban_message", "I'm sorry, but you cannot post messages at this time."));
    watchdog("rpforum", "User banned from posting by IP: $bad_ip", array(), WATCHDOG_ALERT);
    return;
  }
  
  
  $token = $form_state["values"]["hidden_token"];
  $parent_node = $form_state["values"]["hidden_parent_node"];
  $tid = $form_state["values"]["hidden_taxonomy"];
  $vid = variable_get("rpforum_nav_vocabulary", "");  //vocab id of the tid.

  // Verify that token is correct!
  if (!rpforum_valid_token($token, $parent_node . $tid)) {
    form_error($form["hidden_token"], t("There seems to be a problem validating your token.  Please back out, refresh the page, and try again."));
    watchdog("rpforum", "User has bad token, was shown cannot post message.", array(), WATCHDOG_ALERT);
    return;
  }

  // Make sure the topic is not locked!  I am pretty sure this is not necessary, but it here just in case.
  if ($parent_node > -1) {
    $details = rpforum_get_post_details($parent_node);
    if ($details["locked"] == "1" && !user_access("administer rp forum")) {
      form_error($form["hidden_token"], t("Sorry, the topic you are trying to post into has been locked by an administrator."));
      watchdog("rpforum", "User tried to submit in locked topic, stopped by validate function.", array(), WATCHDOG_ALERT);
      return;      
    }
  }  
  
  
  // Set the values of the important stuff from our hidden fields.
  $form_state["values"]["field_parent_node"][0]["value"] = $parent_node;
  $form_state["values"]["taxonomy"][$vid] = $tid;
  
}

function rpforum_perm() {
  $perm = array(
    "administer rpforums",
    "administer rpforum settings",
    "administer rpforum bans",
    "administer rpforum access control",    
    "access rpforums",
    "allow report rpforum abuse",
    "view rpforum submission details",
  );
  
  
  return $perm;
  
}

function rpforum_render_bbcode_buttons() {
  $rtn = "";
  
  $rtn .= "<div class='rpforum-bbcode-buttons'>";
  
  $rtn .= "<input type='button' value='B' onClick='rpforumInsertIntoBody(\"[b]\",\"[/b]\")' style='font-weight: bold;'>";
  $rtn .= "<input type='button' value='i' onClick='rpforumInsertIntoBody(\"[i]\",\"[/i]\")' style='font-style: italic;'>";
  $rtn .= "<input type='button' value='U' onClick='rpforumInsertIntoBody(\"[u]\",\"[/u]\")' style='text-decoration: underline;'>";
  $rtn .= "<input type='button' value='S' onClick='rpforumInsertIntoBody(\"[s]\",\"[/s]\")' style='text-decoration: line-through;'>";
  $rtn .= "<input type='button' value='img' onClick='rpforumInsertIntoBody(\"[img]\",\"[/img]\")' >";
  $rtn .= "<input type='button' value='quote' onClick='rpforumInsertIntoBody(\"[quote]\",\"[/quote]\")' >";
  
  // Font size select....
  $sizeArray = array("8pt", "10pt", "12pt", "14pt", "16pt", "18pt", "20pt", "22pt", "24pt", "26pt", "28pt");
  $rtn .= "<select onChange='rpforumInsertIntoBody(\"[size=\" + (this.options[this.selectedIndex].value) + \"]\",\"[/size]\"); this.selectedIndex=0;'>
            <option value=''>Size</option>
            <option value='10pt'>---------</option>";
  foreach($sizeArray as $size) {
    $rtn .= "<option>$size</option>";
  }
  $rtn .= "</select>";
  
  //$rtn .= "<input type='button' value='font size' onClick='rpforumInsertIntoBody(\"[size=12pt]\",\"[/size]\")' >";
    
  // Change color select...
  $colorArray = array("black", "red", "yellow", "pink", "green", "orange", "purple", "blue",
                      "beige", "brown", "teal", "navy");
  $rtn .= "<select onChange='rpforumInsertIntoBody(\"[color=\" + (this.options[this.selectedIndex].value) + \"]\",\"[/color]\"); this.selectedIndex=0;'>
            <option value='black'>Color</option>
            <option value='black'>-------</option>";
  foreach($colorArray as $color) {
    $rtn .= "<option>$color</option>";
  }
   $rtn .= "</select>";
  
  if (variable_get("rpforum_use_smileys", 1) == "1") {
    $rtn .= rpforum_render_smiley_buttons();
  }
   
  $rtn .= "</div>";
  
  return $rtn;
}

function rpforum_get_smiley_array() {
  $smiley_array = array(
    ":)" => "smiley.gif",
    ";)" => "wink.gif",
    ":D" => "cheesy.gif",
    ";D" => "grin.gif",
    ">:(" => "angry.gif",
    ":(" => "sad.gif",
    ":o" => "shocked.gif",
    "???" => "huh.gif",
    ":%)" => "rolleyes.gif",
    ":P" => "tongue.gif",
    ":-[" => "embarrassed.gif",
    ":-X" => "lipsrsealed.gif",
    ":-\\\\" => "undecided.gif",
    ":-*" => "kiss.gif",
    ":,(" => "cry.gif",    
  );

  return $smiley_array;
}

function rpforum_render_smiley_buttons() {
  $rtn = "";
  
  // $rtn .= "<input type='button' value='B' onClick='rpforumInsertIntoBody(\"[b]\",\"[/b]\")' style='font-weight: bold;'>";

  $rtn .= "<div class='rpforum-smiley-buttons'>";

  $smiley_array = rpforum_get_smiley_array();
  $smiley_path = $GLOBALS["base_url"] . "/" . drupal_get_path("module", "rpforum") . "/smileys/default";
  
  foreach ($smiley_array as $code => $file) {
    $rtn .= "<img src='$smiley_path/$file' alt='$file' title='$file' 
            onClick='rpforumInsertIntoBody(\" $code\",\"\")' style='cursor: pointer;'> ";
  }
  
  $rtn .= "</div>";
  
  return $rtn;
}


function rpforum_delete_topic_submit($form, $form_state) {
  
  $nid = $form_state["values"]["nid"];
  // Use the view to find all the posts under this topic.
  $view = views_get_view("rp_forum_view_posts");
  $view->execute_display("default", array($nid));
  foreach ($view->result as $res) {
    node_delete($res->nid);
    
    db_query("DELETE FROM {rpforum_user_has_read}
            WHERE nid = %d", $res->nid);
  }

  db_query("DELETE FROM {rpforum_user_subscriptions}
            WHERE topic_nid = %d", $nid);
   
  
}

function rpforum_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  
  // We don't care unless this is our rp_forum_post!
  if ($node->type != "rp_forum_post") {
    return;
  } 
  
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  
  if ($op == "insert" || $op == "update") {
    
    
    // If the user has the Abuse module (with it's watchlist module)
    // enabled, evaluate the body2 of the node with the watchlist.
    // Special thanks to Max Mendez for this code.
    if (function_exists("watchlist_evaluate") && function_exists("watchlist_checklist")) {
      $text = $node->title . ' ' . urldecode($node->field_body2[0]['value']) . ' ' . watchlist_invoke_extra_text($node);
      $matches = watchlist_checklist($text);
      //Perform the evaluation
      watchlist_evaluate($node, $node->nid, $node->type, $matches);
    }    
    
    // We want to update our post_details table...
    $details = array(
      "ip" => $_SERVER['REMOTE_ADDR'],
      "op" => $op,
    );
    
    if ($node->only_modified_sticky == true) {
      $details["only_modified_sticky"] = true;
    }
    
    
    if ($node->nosetdetails != true) {
      rpforum_set_post_details($node->nid, $details);
    }
      
    if ($node->nosetsearch != true) {
      rpforum_set_search_data($node);
    }
    
    $topic_nid = $node->field_parent_node[0]["value"];
    
    // Is the user trying to subscribe to this topic?

    if ($node->subscribe == 1) {
      if ($topic_nid == "-1") {  // top-level post!  It's nid is the topic nid!
        $topic_nid = $node->nid;
      }
      
      $subscriptions = rpforum_get_user_subscriptions($user->uid);
      
      if (!in_array($topic_nid, $subscriptions)) {
        db_query("INSERT INTO {rpforum_user_subscriptions}
                    (uid, topic_nid) VALUES (%d, %d) ", $user->uid, $topic_nid);
      }
      
    }   
    
      if ($op == "insert") {
        // If anyone was subscribed to this node, we should email them
        // to let them know there has been an update!
        $subscribers = rpforum_get_subscribers_to_node($node->field_parent_node[0]["value"]);
        foreach ($subscribers as $suid) {
          if ($suid == $user->uid) continue; // skip the current user!
          rpforum_mail_subscriber($suid, $node->field_parent_node[0]["value"], $node->nid);
        }
        
      }

    
    // We need to re-save the topic_node/parent_node so that it will
    // get a new updated timestamp, and sort correctly in lists.
    if ($topic_nid != "-1") {
      $topic_node = node_load($topic_nid);
      $topic_node->noredirect = true;
      $topic_node->nosetsearch = true;
      $topic_node->nosetdetails = true;
      if ($node->no_resave_topic_node != true) {
        node_save($topic_node);
      }
      
      // We also want to update our topic_replies table
      // with the new number of replies.
      $count = rpforum_get_replies_to_post_count($topic_nid);
      db_query("UPDATE {rpforum_topic_replies}
                SET count = %d
                WHERE nid = %d ", $count, $topic_nid);
      if (db_affected_rows() == 0) {
        db_query("INSERT INTO {rpforum_topic_replies}
                  (nid, count) VALUES (%d, %d) ", $topic_nid, $count);
      }
      
    }
    
    
    // If the user requested that we rebuild the node_access table on every save...
    // Code provided by user nekorin on http://forum.richardpeacock.com/forum/2/152
    if (variable_get("rpforum_advanced_rebuild_node_access", 0) == 1) {
      rpforum_rebuild_node_access();
    }
    
    
    $vid = variable_get("rpforum_nav_vocabulary", "");      
            
    if ($node->field_parent_node[0]["value"] == "-1") {
      // This is a new node being added as a topic!  So we need to fix
      // the redirect to go to the right place.  Right now, it's trying
      // to go to /tid/-1.  That -1 needs to be replaced with this node's
      // nid.
      
      if ($op == "update") {
        // We need to mark our tables as "updated" for this node.
        db_query("UPDATE {rpforum_user_has_read}
                  SET status = 'updated'
                  WHERE nid = %d ", $node->nid);
      }
            
      if ($node->noredirect != true) {
        drupal_goto("$menu_base/{$node->taxonomy[$vid]}/$node->nid");
      }
    } 
    else {
      // We actually need to add a goto=nid to the end of our redirect
      // in order for us to get to the correct page.
      if ($node->noredirect != true) {
        drupal_goto("$menu_base/{$node->taxonomy[$vid]}/" . $node->field_parent_node[0]["value"], "goto=$node->nid");
      }
      
    }
    
    
  
  }
  
  
  if ($op == "view") {
    // If the user requested that we rebuild the node_access table on every save...
    // Code provided by user nekorin on http://forum.richardpeacock.com/forum/2/152
    if (variable_get("rpforum_advanced_rebuild_node_access", 0) == 1) {
      rpforum_rebuild_node_access();
    }
  }
  
  
  if ($op == "delete") {
    db_query("DELETE FROM {rpforum_user_has_read} WHERE nid = %d", $node->nid);
    db_query("DELETE FROM {rpforum_post_details} WHERE nid = %d", $node->nid);
    db_query("DELETE FROM {rpforum_post_search_data} WHERE nid = %d", $node->nid);
    db_query("DELETE FROM {rpforum_post_search_terms} WHERE nid = %d", $node->nid);
    db_query("DELETE FROM {rpforum_topic_views} WHERE nid = %d", $node->nid);
    db_query("DELETE FROM {rpforum_topic_replies} WHERE nid = %d", $node->nid);    
    db_query("DELETE FROM {rpforum_user_subscriptions} WHERE topic_nid = %d", $node->nid);    
  }
  
}


function rpforum_rebuild_node_access() {
// If the user requested that we rebuild the node_access table on every save...
// Code provided by user nekorin on http://forum.richardpeacock.com/forum/2/152

  $result = db_query("SELECT node.nid, node.type FROM {node} node 
                      LEFT OUTER JOIN {node_access} node_access
                      ON node.nid = node_access.nid 
                      WHERE node.type = 'rp_forum_post' 
                      AND node_access.nid is NULL");
  while ($row = db_fetch_object($result)) {
    $data = array(
      'nid' => $row->nid,
      'gid' => 0,
      'realm' => 'all',
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    drupal_write_record('node_access', $data);        
  }
  
}


function rpforum_mail_subscriber($uid, $topic_nid, $goto_nid = "") {
  // Mail this subscriber to let them know that the topic has been replied to!
  $menu_base = variable_get("rpforum_menu_base", "rpforum");
  $topic_node = node_load($topic_nid);
  $user = user_load($uid);
  $tid = key($topic_node->taxonomy);
  
  $msg = "";
  $msg .= t("Hello!") . "\n\n";
  $msg .= t("A topic you are following on ") . variable_get('site_name', "Default site name") . t(" has been updated.") . "\n\n";
  $msg .= t("Topic:") . " $topic_node->title\n";
  $msg .= t("Click here to go to the latest post: ") . $GLOBALS["base_url"] . "/$menu_base/$tid/$topic_nid?goto=$goto_nid" . "\n\n";
  $msg .= t("If you wish to unsubscribe from this notification, visit your Profile settings page ");
  $msg .= t("by clicking here: ") . $GLOBALS["base_url"] . "/user/$uid/edit-profile";
  
  $subject = t("New forum post");
  $headers = "From: " . variable_get("site_mail", "no-reply@no-reply.com");
    
  mail($user->mail, $subject, $msg, $headers);
  
}

function rpforum_get_subscribers_to_node($nid) {
  $rtn = array();
  $res = db_query("SELECT * FROM {rpforum_user_subscriptions}
                    WHERE topic_nid = %d", $nid);
  while ($cur = db_fetch_array($res)) {
    $rtn[] = $cur["uid"];
  }
  return $rtn;
}


function rpforum_set_post_details($nid, $details = array()) {

  $d = serialize($details);
  db_query("UPDATE {rpforum_post_details} 
            SET details = '%s'
            WHERE nid = %d", $d, $nid);
  if (db_affected_rows() == 0) {
    db_query("INSERT INTO {rpforum_post_details}
              (nid, details) VALUES (%d, '%s')", $nid, $d);
  }
  
}

function rpforum_get_post_details($nid) {
  $d = db_result(db_query("SELECT details FROM {rpforum_post_details}
                          WHERE nid = %d", $nid));
  if (!$details = unserialize($d)) {
    $details = array();
  }
  return $details;
}


function rpforum_render_reply_previous_posts($nid)
{
  // This function is similar to display_posts, but in reverse.
  // It will display the last 10 posts in descending order for this $nid.
  // It is meant to show up on the bottom of the page when they are
  // entering a reply.
$rtn = "";
  
  
  drupal_add_css(drupal_get_path("module", "rpforum") . "/style/rpforum.css");
  
  $starting_node = node_load($nid);
  drupal_set_title($starting_node->title);
  $rtn .= "<div class='rpforum-page-reply rpforum-style-default'>";
  // Display the parent post...
  
  // Now, display any replies (using our clever view)...
  $view = views_get_view("rp_forum_view_posts");
  $view->execute_display("attachment_1", array($nid));
  $rtn .= $view->display["attachment_1"]->handler->output;
  
  // Only show the original post if our count is less than the items per page.
  if (count($view->result) < $view->pager["items_per_page"]) {
    $rtn.= "<div class='rpforum-parent-post'>" . node_view($starting_node, true, false, false) . "</div>";
  }
  
  $rtn .= "</div>";
  
  return $rtn;
  
}


/**
 * Theme registry alter hook
 * 
 * Register this modules path as a search location for tpl files
 *
 */
function rpforum_theme_registry_alter(&$theme_registry) {

  if (is_array($theme_registry['node'])) {
    // store a reference to the first theme path entry (normally this should be 'modules/system')
    $first_path = array_shift($theme_registry['node']['theme paths']);
    
    // get the path to our module's page template files
    $template_path = drupal_get_path('module', 'rpforum');
    
    // now change the array to have the first entry first, then our template path, and then any other theme paths
    array_unshift($theme_registry['node']['theme paths'], $first_path, $template_path);
  }
  
}


// We want to get rid of tabs on certain pages.  Specifically when we are
// editing previous forum entries.
function rpforum_preprocess(&$variables, $hook) {
    global $user;

    if($hook == 'page' ){ //&& !in_array('admin',array_values($user->roles)) && $user->uid != 1){
        $nid = str_replace('page-node-','',$variables['template_files'][1]);
        $node = node_load($nid);
        if($node->type == 'rp_forum_post'){
            rpforum_removetab('View', $variables);
            rpforum_removetab('Edit', $variables);
        }
    }
    return $variables;
}

function rpforum_removetab($label, &$vars) {
  $tabs = explode("\n", $vars['tabs']);
  $vars['tabs'] = '';

  foreach($tabs as $tab) {
    if(strpos($tab, '>' . $label . '<') === FALSE) {
      $vars['tabs'] .= $tab . "\n";
    }
  }
}


function rpforum_preprocess_content_field(&$variables) {

  if($variables['field']['field_name'] == "field_body2" && $variables['field']['type_name'] == "rp_forum_post") {
    $v = $variables['items'][0]['view'];
    
    $maxlen = variable_get("rpforum_wrap_length", 75);
    if ($maxlen > 0) {
      $v = rpforum_htmlwrap($v, $maxlen);
      $variables['items'][0]['view'] = $v;
    }
    
  }
   

}

// This function was retrieved and modified from a function I found on
// php.net.

function rpforum_htmlwrap($string, $maxlen, $break_with = "\n") {
  $length = strlen($string);
  
  for ($i = 0; $i <= $length; $i++) {
    
    $char = substr($string, $i, 1);
    if ($char == "<") {
      $skip = TRUE;
    }
    elseif ($char == ">") {
      $skip = FALSE;
    }
    elseif ($char == " ") {
      $wrap = 0;
    }

    if ($skip == FALSE) {
      $wrap = $wrap + 1;
    }

    $returnvar = $returnvar . $char;

    if ($wrap > $maxlen) {
      $returnvar = $returnvar . $break_with;
      $wrap=0;
    }
    
  }

  return $returnvar;
}

?>
